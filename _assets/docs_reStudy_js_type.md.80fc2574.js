import{g as e,f as a,E as r}from"./common-d6bd45c0.js";const n='{"title":"类型","frontmatter":{},"headers":[{"level":2,"title":"类型","slug":"类型"},{"level":3,"title":"Undefined","slug":"undefined"},{"level":3,"title":"Null","slug":"null"},{"level":3,"title":"Boolean","slug":"boolean"},{"level":3,"title":"String","slug":"string"},{"level":3,"title":"Number","slug":"number"},{"level":3,"title":"Symbol","slug":"symbol"},{"level":3,"title":"Object","slug":"object"},{"level":2,"title":"类型转换","slug":"类型转换"}],"relativePath":"docs/reStudy/js_type.md","lastUpdated":1639657876311.876}';var d={};const i=r('<h2 id="类型"><a class="header-anchor" href="#类型" aria-hidden="true">#</a> 类型</h2><blockquote><p>运行时类型是代码实际执行过程中我们用到的类型。所有的类型数据都会属于 7 个类型之一。从变量、参数、返回值到表达式中间结果，任何 JavaScript 代码运行过程中产生的数据，都具有运行时类型。</p></blockquote><p>JavaScript 语言的每一个值都属于某一种数据类型。JavaScript 语言规定了 7 种语言类型。语言类型广泛用于变量、函数参数、表达式、函数返回值等场合。根据最新的语言标准，这 7 种语言类型是：</p><p>Undefined；Null；Boolean；String；Number；Symbol；Object。</p><h3 id="undefined"><a class="header-anchor" href="#undefined" aria-hidden="true">#</a> Undefined</h3><p>类型表示未定义，它的类型只有一个值，就是 undefined。任何变量在赋值前是 Undefined 类型、值为 undefined，一般我们可以用全局变量 undefined（就是名为 undefined 的这个变量）来表达这个值，或者 void 运算来把任意一个表达式变成 undefined 值。</p><h4 id="为什么有的编程规范要求用-void-0-代替-undefined？"><a class="header-anchor" href="#为什么有的编程规范要求用-void-0-代替-undefined？" aria-hidden="true">#</a> 为什么有的编程规范要求用 void 0 代替 undefined？</h4><p>答：因为 JavaScript 的代码 undefined 是一个变量，而并非是一个关键字，这是 JavaScript 语言公认的设计失误之一，所以，我们为了避免无意中被篡改，我建议使用 void 0 来获取 undefined 值。</p><h3 id="null"><a class="header-anchor" href="#null" aria-hidden="true">#</a> Null</h3><p>定义了但是为空，所以，在实际编程时，我们一般不会把变量赋值为 undefined，这样可以保证所有值为 undefined 的变量，都是从未赋值的自然状态。</p><p>Null 类型也只有一个值，就是 null，它的语义表示空值，与 undefined 不同，null 是 JavaScript 关键字，所以在任何代码中，你都可以放心用 null 关键字来获取 null 值。</p><h3 id="boolean"><a class="header-anchor" href="#boolean" aria-hidden="true">#</a> Boolean</h3><p>有两个值， true 和 false，它用于表示逻辑意义上的真和假，同样有关键字 true 和 false 来表示两个值。</p><h3 id="string"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h3><p>用于表示文本数据</p><h4 id="字符串是否有最大长度？"><a class="header-anchor" href="#字符串是否有最大长度？" aria-hidden="true">#</a> 字符串是否有最大长度？</h4><p>答：String 有最大长度是 2^53 - 1，这在一般开发中都是够用的，因为 String 的意义并非“字符串”，而是字符串的 UTF16 编码，我们字符串的操作 charAt、charCodeAt、length 等方法针对的都是 UTF16 编码。所以，字符串的最大长度，实际上是受字符串的编码长度影响的。</p><h3 id="number"><a class="header-anchor" href="#number" aria-hidden="true">#</a> Number</h3><p>表示我们通常意义上的“数字”。这个数字大致对应数学中的有理数</p><p>JavaScript 中的 Number 类型有 18437736874454810627(即 2^64-2^53+3) 个值。</p><p>JavaScript 中的 Number 类型基本符合 IEEE 754-2008 规定的双精度浮点数规则，但是 JavaScript 为了表达几个额外的语言场景（比如不让除以 0 出错，而引入了无穷大的概念），规定了几个例外情况：</p><h4 id="nan"><a class="header-anchor" href="#nan" aria-hidden="true">#</a> NaN</h4><p>用于引用特殊的非数字值，</p><p>**提示：**请使用 isNaN() 来判断一个值是否是数字。原因是 NaN 与所有值都不相等，包括它自己。可以把 Number 对象设置为该值，来指示其不是数字值。</p><p>占用了 9007199254740990，这原本是符合 IEEE 规则的数字；</p><div class="language-"><pre><code>Number(&#39;asfadas&#39;) //NaN\nisNaN(&#39;300&#39;) //false\nisNaN(&#39;sdfa&#39;) //true\n</code></pre></div><p>Infinity，无穷大；</p><p>-Infinity，负无穷大。</p><h4 id="为什么在-javascript-中，0-1-0-2-不能-0-3？"><a class="header-anchor" href="#为什么在-javascript-中，0-1-0-2-不能-0-3？" aria-hidden="true">#</a> 为什么在 JavaScript 中，0.1+0.2 不能 =0.3？</h4><p>答：浮点数运算的精度问题导致等式左右的结果并不是严格相等，而是相差了个微小的值。所以实际上，这里错误的不是结论，而是比较的方法，正确的比较方法是使用 JavaScript 提供的最小精度值</p><div class="language-"><pre><code>console.log( Math.abs(0.1 + 0.2 - 0.3) &lt;= Number.EPSILON); //true\n</code></pre></div><h3 id="symbol"><a class="header-anchor" href="#symbol" aria-hidden="true">#</a> Symbol</h3><p>Symbol 是 ES6 中引入的新类型，它是一切非字符串的对象 key 的集合，在 ES6 规范中，整个对象系统被用 Symbol 重塑。</p><p>创建：</p><div class="language-"><pre><code>var mySymbol = Symbol(&quot;my symbol&quot;);\n</code></pre></div><div class="language-"><pre><code>//我们可以使用 Symbol.iterator 来自定义 for…of 在对象上的行为：\n\t\tvar o = new Object\n\t\t\n    o[Symbol.iterator] = function() {\n        var v = 0\n        return {\n            next: function() {\n                return { value: v++, done: v &gt; 10 }\n            }\n        }        \n    };\n\n    for(var v of o) \n        console.log(v); // 0 1 2 3 ... 9\n</code></pre></div><h3 id="object"><a class="header-anchor" href="#object" aria-hidden="true">#</a> Object</h3><p>Object 是 JavaScript 中最复杂的类型，也是 JavaScript 的核心机制之一。Object 表示对象的意思，它是一切有形和无形物体的总称。</p><h4 id="为什么给对象添加的方法能用在基本类型上？"><a class="header-anchor" href="#为什么给对象添加的方法能用在基本类型上？" aria-hidden="true">#</a> 为什么给对象添加的方法能用在基本类型上？</h4><p>答：运算符提供了装箱操作，它会根据基础类型构造一个临时对象，使得我们能在基础类型上调用对应对象的方法。</p><h2 id="类型转换"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h2><p><a data-fancybox title="img" href="https://static001.geekbang.org/resource/image/71/20/71bafbd2404dc3ffa5ccf5d0ba077720.jpg"><img src="https://static001.geekbang.org/resource/image/71/20/71bafbd2404dc3ffa5ccf5d0ba077720.jpg" alt="img"></a></p>',42);d.render=function(r,n,d,t,l,o){return a(),e("div",null,[i])};export default d;export{n as __pageData};
