import{g as e,f as a,E as t}from"./common-d6bd45c0.js";const i='{"title":"aria-label","frontmatter":{},"headers":[{"level":2,"title":"综述","slug":"综述"},{"level":2,"title":"Widget 角色","slug":"widget-角色"},{"level":2,"title":"structure 角色","slug":"structure-角色"},{"level":2,"title":"window 角色","slug":"window-角色"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"docs/reStudy/html_ARIA.md","lastUpdated":1639657876285.8923}';var l={};const p=t('<p>ARIA 全称为 Accessible Rich Internet Applications，它表现为一组属性，是用于可访问性的一份标准。关于可访问性，它被提到最多的，就是它可以为视觉障碍用户服务，但是，这是一个误解。</p><p>实际上，可访问性其实是一个相当大的课题，它的定义包含了各种设备访问、各种环境、各种人群访问的友好性。不单单是永久性的残障人士需要用到可访问性，健康的人也可能在特定时刻处于需要可访问性的环境。</p><p><strong>role</strong> 的作用是描述一个非标准的tag的实际作用。比如用 div 做 button，那么设置 div 的 role=&quot;button&quot;，辅助工具就可以认出这实际上是个 button。</p><p><strong>aria</strong> 的意思是 Accessible Rich Internet Application，aria-* 的作用就是描述这个 tag 在可视化的情境中的具体信息。比如：</p><div class="language-"><pre><code>&lt;div role=&quot;checkbox&quot; aria-checked=&quot;checked&quot;&gt;&lt;/div&gt;\n</code></pre></div><p>辅助工具就会知道，这个div实际上是个checkbox的角色，为选中状态。</p><h4 id="aria-label"><a class="header-anchor" href="#aria-label" aria-hidden="true">#</a> aria-label</h4><p>正常情况下，会在表单里给input组件指定对应的label，当用户tab到输入框时，读屏软件就会读出相应label里的文本。</p><div class="language-"><pre><code>&lt;label for=&quot;username&quot;&gt;用户名：&lt;/label&gt;&lt;input type=&quot;text&quot; id=&quot;username&quot;/&gt;\n</code></pre></div><p>当没有给输入框设计对应的label文本的位置时，aria-label属性为组件指定内置的文本标签。它不在视觉上呈现。</p><div class="language-"><pre><code>&lt;input type=&quot;text&quot; aria-label=&quot;用户名&quot;/&gt;\n</code></pre></div><p>此时，当焦点落到该输入框时，读屏软件就会读出aria-label里的内容，即&quot;用户名&quot;。 aria-label只有加在可被tab到的元素上，读屏才会读出其中的内容。以下情况，也是可以读出的：</p><div class="language-"><pre><code>&lt;span tabindex=&quot;0″ aria-label=&quot;标签提示内容&quot;&gt;可被tab的span标签&lt;/span&gt;\n</code></pre></div><h4 id="aria-labelledby"><a class="header-anchor" href="#aria-labelledby" aria-hidden="true">#</a> aria-labelledby</h4><p>当想要的标签文本已在其他元素中存在时，可以将其值为该元素的id。</p><div class="language-"><pre><code>&lt;div role=&quot;form&quot; aria-labelledby=&quot;form-title&quot;&gt;\n&lt;span id=&quot;form-title&quot;&gt;使用手机号码注册&lt;/span&gt;\n&lt;form&gt;……&lt;/form&gt;\n&lt;/div&gt;\n</code></pre></div><p>表单区添加了role=&quot;form&quot;，当跳转到该区域时，不仅会读出&quot;表单区&quot;，也会读出&quot;使用手机号码注册&quot;。</p><p>如果一个元素同时有aria-labelledby和aria-label，读屏软件会优先读出aria-labelledby的内容</p><h2 id="综述"><a class="header-anchor" href="#综述" aria-hidden="true">#</a> 综述</h2><p>我们先整体来看看，ARIA 给 HTML 元素添加的一个核心属性就是 role，我们来看一个例子：</p><div class="language-"><pre><code>&lt;span \n    role=&quot;checkbox&quot; \n    aria-checked=&quot;false&quot; \n    tabindex=&quot;0&quot; \n    aria-labelledby=&quot;chk1-label&quot;&gt;\n&lt;/span&gt;\n&lt;label id=&quot;chk1-label&quot;&gt;Remember my preferences&lt;/label&gt;\n</code></pre></div><p>这里我们给一个 span 添加了 checkbox 角色，这样，表示我们这个 span 被用于 checkbox，这意味着，我们可能已经用 JS 代码绑定了这个 span 的 click 事件，并且以 checkbox 的交互方式来处理用户操作。</p><p>同时，ARIA 系统还提供了一系列 ARIA 属性给 checkbox 这个 role，这意味着，我们可以通过 HTML 属性变化来理解这个 JavaScript 组件的状态，读屏软件等三方客户端，就可以理解我们的 UI 变化，这正是 ARIA 标准的意义。</p><p>role 的定义是一个树形的继承关系，我们先来理解一下它的整体结构： <a data-fancybox title="image.png" href="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f00966c831d344259a379ee753cbafd5~tplv-k3u1fbpfcp-watermark.image?"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f00966c831d344259a379ee753cbafd5~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></a></p><p>其中，widget 表示一些可交互的组件，structure 表示文档中的结构，window 则代表窗体。</p><h2 id="widget-角色"><a class="header-anchor" href="#widget-角色" aria-hidden="true">#</a> Widget 角色</h2><p>这一类角色跟我们桌面开发中的控件类似，它表示一个可交互的组件，它们有：</p><p><a data-fancybox title="image.png" href="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7d9683de5be74b0d9a04c91fd07f871e~tplv-k3u1fbpfcp-watermark.image?"><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7d9683de5be74b0d9a04c91fd07f871e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></a> 我们这里按照继承关系给出一份列表和简要说明：</p><p><a data-fancybox title="image.png" href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/08f6208df2b64874b07bcaf7d2502d47~tplv-k3u1fbpfcp-watermark.image?"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/08f6208df2b64874b07bcaf7d2502d47~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></a> ARIA role 允许多继承，这里有些角色我没有重复写。</p><p>注意，这些 role 可以出现在任何一个 HTML 元素之上，同时要注意，这些 ARIA 属性，不会真实地改变任何一个元素的行为，比如，我们刚才讲的 checkbox，即使我们给一个 span 添加了 Checkbox 角色，我们也需要用 JavaScript 编写相应的逻辑。</p><p>这些 widget 同时还会带来对应的 ARIA 属性，比如，我们的 Checkbox 角色，会带来两个属性：</p><ul><li>aria-checked 表示复选框是否已经被选中；</li><li>aria-labelledby 表示复选框对应的文字。</li></ul><p>而 Button 角色，则会带来另外两个属性：</p><ul><li>aria-pressed 按钮是否已经被按下；</li><li>aria-expanded 按钮控制的目标是否已经被展开。</li></ul><p>除了它们本身的属性之外，可交互组件还有继承来的属性，比如，switch 角色继承了 checkbox，因此，它也可以使用 aria-checked 属性。</p><p>在 WAI-ARIA 标准中，你可以找到所有的角色和对应的属性，我们这里就不一一列举了。</p><ul><li><a href="https://www.w3.org/TR/wai-aria/" target="_blank" rel="noopener noreferrer">https://www.w3.org/TR/wai-aria/</a></li></ul><p>很多这些 ARIA 属性都是需要在 JavaScript 中维护的。</p><p>如果我们要实现一份组件库，这些 widget role 和它们对应的 aria 属性是非常好的参考。</p><p>如果你是组件的实现者，也希望你在实现组件时把对应的 ARIA 属性自动维护好</p><p>除了简单的 widget，还有一些比较复杂的角色，需要多个角色一起配合。我们来逐个了解一下。</p><ul><li>Combobox 是一个带选项的输入框，我们常见的搜索引擎，一般都会提供这样的输入框，当输入时，它会提供若干提示选项。</li><li>Grid 是一个表格，它会分成行、列，行列又有行头和列头表示行、列的意义。</li><li>Tablist 是一个可切换的结构，一般被称为选项卡，它包含了 tab 头和 tabpanel，在 tab 容器中，可能包含各种组件。</li><li>Listbox 是一个可选中的列表，它内部具有角色为 Option 的选项。</li><li>Menu 是指菜单，菜单中可以加入嵌套的菜单项（Menuitem 角色），除了普通菜单项，还可以有 Menuitemcheckbox 带复选框的菜单栏和 Menuitemradio 带单选框的菜单栏。</li><li>Radiogroup 是一组互斥的单选框的容器，它的内部可以由若干个角色为 radio 的单选框。</li><li>Tree 是树形控件，它的内部含有 Treeitem 树形控件项，它还有一种升级形式是 Treegrid。</li></ul><h2 id="structure-角色"><a class="header-anchor" href="#structure-角色" aria-hidden="true">#</a> structure 角色</h2><p>结构角色其实跟 HTML5 中不少新标签作用重合了，这里建议优先使用 HTML5 标签。</p><p>这部分角色的作用类似于语义化标签，但是内容稍微有些不同，我们这里就不详细讲解了，仅仅给出一张图供你参考：</p><p><a data-fancybox title="image.png" href="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e9d437311b446aa961a16b164117580~tplv-k3u1fbpfcp-watermark.image?"><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e9d437311b446aa961a16b164117580~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></a> 注：separator 在允许焦点时属于组件，在不允许焦点时属于文档结构。</p><p>这里我们需要特别提出 Landmark 角色这个概念，Landmark 角色直接翻译是地标，它是 ARIA 标准中总结的 Web 网页中最常见的 8 个结构，Landmark 角色实际上是 section 的子类，这些角色在生成页面摘要时有很大可能性需要被保留，它们是：</p><p><a data-fancybox title="image.png" href="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f0f73a421024c49b56e5149ddcf84a4~tplv-k3u1fbpfcp-watermark.image?"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f0f73a421024c49b56e5149ddcf84a4~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></a></p><h2 id="window-角色"><a class="header-anchor" href="#window-角色" aria-hidden="true">#</a> window 角色</h2><p>在我们的网页中，有些元素表示“新窗口”，这时候，会用到 window 角色。window 系角色非常少，只有三个角色：</p><ul><li>window <ul><li>dialog <ul><li>alertdialog</li></ul></li></ul></li></ul><p>dialog 可能会产生“焦点陷阱”，也就是说，当这样的角色被激活时，焦点无法离开这个区域。</p><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>我们以 ARIA 角色为中心，讲解了 ARIA 定义的语义体系。我们可以把 ARIA 分为三类。</p><ul><li>Widget 角色：主要是各种可交互的控件。</li><li>结构角色：文档的结构。</li><li>窗体角色：弹出的窗体。</li></ul>',55);l.render=function(t,i,l,r,o,c){return a(),e("div",null,[p])};export default l;export{i as __pageData};
