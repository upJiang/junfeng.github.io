import{g as t,f as a,E as e}from"./common-d6bd45c0.js";const o='{"title":"二叉树的遍历——命题思路解读","frontmatter":{},"headers":[{"level":2,"title":"二叉树的遍历——命题思路解读","slug":"二叉树的遍历——命题思路解读"},{"level":2,"title":"遍历方法图解与编码实现","slug":"遍历方法图解与编码实现"},{"level":3,"title":"先序遍历","slug":"先序遍历"},{"level":3,"title":"中序遍历","slug":"中序遍历"},{"level":3,"title":"后序遍历","slug":"后序遍历"},{"level":2,"title":"总结代码：","slug":"总结代码："}],"relativePath":"docs/algorithm/ergodicTree.md","lastUpdated":1645541767934.3738}';var r={};const n=e('<h2 id="二叉树的遍历——命题思路解读"><a class="header-anchor" href="#二叉树的遍历——命题思路解读" aria-hidden="true">#</a> 二叉树的遍历——命题思路解读</h2><p>以一定的顺序规则，逐个访问二叉树的所有结点，这个过程就是二叉树的遍历。按照顺序规则的不同，遍历方式有以下四种：</p><ul><li>先序遍历</li><li>中序遍历</li><li>后序遍历</li><li>层次遍历</li></ul><p>按照实现方式的不同，遍历方式又可以分为以下两种：</p><ul><li>递归遍历（先、中、后序遍历）</li><li>迭代遍历（层次遍历）</li></ul><p><a data-fancybox title="img" href="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/14/17177af5d863f478~tplv-t2oaga2asx-watermark.awebp"><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/14/17177af5d863f478~tplv-t2oaga2asx-watermark.awebp" alt="img"></a></p><p>假如在保证“左子树一定先于右子树遍历”这个前提，那么遍历的可能顺序也不过三种：</p><ul><li><strong>根结点</strong> -&gt; 左子树 -&gt; 右子树</li><li>左子树 -&gt; <strong>根结点</strong> -&gt; 右子树</li><li>左子树 -&gt; 右子树 -&gt; <strong>根结点</strong></li></ul><p><strong>所谓的“先序”、“中序”和“后序”，“先”、“中”、“后”其实就是指根结点的遍历时机。</strong></p><h2 id="遍历方法图解与编码实现"><a class="header-anchor" href="#遍历方法图解与编码实现" aria-hidden="true">#</a> 遍历方法图解与编码实现</h2><p>树的结构：</p><div class="language-"><pre><code>const root = {\n  val: &quot;A&quot;,\n  left: {\n    val: &quot;B&quot;,\n    left: {\n      val: &quot;D&quot;\n    },\n    right: {\n      val: &quot;E&quot;\n    }\n  },\n  right: {\n    val: &quot;C&quot;,\n    right: {\n      val: &quot;F&quot;\n    }\n  }\n};\n</code></pre></div><p><strong>代码都相同，只是输出结点值得时机不同</strong></p><h3 id="先序遍历"><a class="header-anchor" href="#先序遍历" aria-hidden="true">#</a> 先序遍历</h3><p><a data-fancybox title="img" href="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/6/1714ec42acc57e04~tplv-t2oaga2asx-watermark.awebp"><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/6/1714ec42acc57e04~tplv-t2oaga2asx-watermark.awebp" alt="img"></a></p><div class="language-"><pre><code>// 所有遍历函数的入参都是树的根结点对象\nfunction preorder(root) {\n    // 递归边界，root 为空\n    if(!root) {\n        return \n    }\n     \n    // 输出当前遍历的结点值\n    console.log(&#39;当前遍历的结点值是：&#39;, root.val)  \n\n    //如果没有左右子树就是null，再次进来就return出去了\n    // 递归遍历左子树 \n    preorder(root.left)  \n    // 递归遍历右子树  \n    preorder(root.right)\n}\n</code></pre></div><h3 id="中序遍历"><a class="header-anchor" href="#中序遍历" aria-hidden="true">#</a> 中序遍历</h3><p><a data-fancybox title="img" href="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/6/1714f098b2bd1f9a~tplv-t2oaga2asx-watermark.awebp"><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/6/1714f098b2bd1f9a~tplv-t2oaga2asx-watermark.awebp" alt="img"></a></p><div class="language-"><pre><code>// 所有遍历函数的入参都是树的根结点对象\nfunction inorder(root) {\n    // 递归边界，root 为空\n    if(!root) {\n        return \n    }\n     \n    // 递归遍历左子树 \n    inorder(root.left)  \n    // 输出当前遍历的结点值\n    console.log(&#39;当前遍历的结点值是：&#39;, root.val)  \n    // 递归遍历右子树  \n    inorder(root.right)\n}\n</code></pre></div><h3 id="后序遍历"><a class="header-anchor" href="#后序遍历" aria-hidden="true">#</a> 后序遍历</h3><p><a data-fancybox title="img" href="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/6/1714efce7db2cdff~tplv-t2oaga2asx-watermark.awebp"><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/6/1714efce7db2cdff~tplv-t2oaga2asx-watermark.awebp" alt="img"></a></p><div class="language-"><pre><code>function postorder(root) {\n    // 递归边界，root 为空\n    if(!root) {\n        return \n    }\n     \n    // 递归遍历左子树 \n    postorder(root.left)  \n    // 递归遍历右子树  \n    postorder(root.right)\n    // 输出当前遍历的结点值\n    console.log(&#39;当前遍历的结点值是：&#39;, root.val)  \n}\n</code></pre></div><h2 id="总结代码："><a class="header-anchor" href="#总结代码：" aria-hidden="true">#</a> 总结代码：</h2><p>打印时机注意一下即可</p><div class="language-"><pre><code>function treeLoop(root){\n    if(!root) return\n    treeLoop(root.left)\n    treeLoop(root.right)\n}\n</code></pre></div>',25);r.render=function(e,o,r,s,l,i){return a(),t("div",null,[n])};export default r;export{o as __pageData};
