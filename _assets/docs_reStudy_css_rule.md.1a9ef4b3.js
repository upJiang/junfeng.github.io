import{g as e,f as a,E as t}from"./common-d6bd45c0.js";const r='{"title":"at 规则 @","frontmatter":{},"headers":[{"level":2,"title":"at 规则 @","slug":"at-规则"},{"level":3,"title":"@charset","slug":"charset"},{"level":3,"title":"@import","slug":"import"},{"level":3,"title":"@media","slug":"media"},{"level":3,"title":"@page","slug":"page"},{"level":3,"title":"@counter-style","slug":"counter-style"},{"level":3,"title":"@key-frames","slug":"key-frames"},{"level":3,"title":"@fontface","slug":"fontface"},{"level":3,"title":"@support","slug":"support"},{"level":3,"title":"@namespace","slug":"namespace"},{"level":3,"title":"@viewport","slug":"viewport"},{"level":3,"title":"其它","slug":"其它"},{"level":2,"title":"普通规则","slug":"普通规则"},{"level":3,"title":"选择器","slug":"选择器"},{"level":3,"title":"声明：属性和值","slug":"声明：属性和值"}],"relativePath":"docs/reStudy/css_rule.md","lastUpdated":1639657876284.8928}';var l={};const i=t('<blockquote><p>CSS 的顶层样式表由两种规则组成的规则列表构成，一种被称为 at-rule，也就是 at 规则，另一种是 qualified rule，也就是普通规则。</p></blockquote><h2 id="at-规则"><a class="header-anchor" href="#at-规则" aria-hidden="true">#</a> at 规则 @</h2><ul><li>@charset ： <a href="https://www.w3.org/TR/css-syntax-3/" target="_blank" rel="noopener noreferrer">https://www.w3.org/TR/css-syntax-3/</a></li><li>@import ：<a href="https://www.w3.org/TR/css-cascade-4/" target="_blank" rel="noopener noreferrer">https://www.w3.org/TR/css-cascade-4/</a></li><li>@media ：<a href="https://www.w3.org/TR/css3-conditional/" target="_blank" rel="noopener noreferrer">https://www.w3.org/TR/css3-conditional/</a></li><li>@page ： <a href="https://www.w3.org/TR/css-page-3/" target="_blank" rel="noopener noreferrer">https://www.w3.org/TR/css-page-3/</a></li><li>@counter-style ：<a href="https://www.w3.org/TR/css-counter-styles-3" target="_blank" rel="noopener noreferrer">https://www.w3.org/TR/css-counter-styles-3</a></li><li>@keyframes ：<a href="https://www.w3.org/TR/css-animations-1/" target="_blank" rel="noopener noreferrer">https://www.w3.org/TR/css-animations-1/</a></li><li>@fontface ：<a href="https://www.w3.org/TR/css-fonts-3/" target="_blank" rel="noopener noreferrer">https://www.w3.org/TR/css-fonts-3/</a></li><li>@supports ：<a href="https://www.w3.org/TR/css3-conditional/" target="_blank" rel="noopener noreferrer">https://www.w3.org/TR/css3-conditional/</a></li><li>@namespace ：<a href="https://www.w3.org/TR/css-namespaces-3/" target="_blank" rel="noopener noreferrer">https://www.w3.org/TR/css-namespaces-3/</a></li></ul><h3 id="charset"><a class="header-anchor" href="#charset" aria-hidden="true">#</a> @charset</h3><blockquote><p>@charset 用于提示 CSS 文件使用的字符编码方式，它如果被使用，必须出现在最前面。这个规则只在给出语法解析阶段前使用，并不影响页面上的展示效果。</p></blockquote><div class="language-"><pre><code>@charset &quot;utf-8&quot;;\n</code></pre></div><h3 id="import"><a class="header-anchor" href="#import" aria-hidden="true">#</a> @import</h3><blockquote><p>@import 用于引入一个 CSS 文件，除了 @charset 规则不会被引入，@import 可以引入另一个文件的全部内容。</p></blockquote><div class="language-"><pre><code>@import &quot;mystyle.css&quot;;\n@import url(&quot;mystyle.css&quot;);\n</code></pre></div><div class="language-"><pre><code>@import [ &lt;url&gt; | &lt;string&gt; ]\n        [ supports( [ &lt;supports-condition&gt; | &lt;declaration&gt; ] ) ]?\n        &lt;media-query-list&gt;? ;\n</code></pre></div><p>通过代码，我们可以看出，import 还支持 supports 和 media query 形式。</p><h3 id="media"><a class="header-anchor" href="#media" aria-hidden="true">#</a> @media</h3><blockquote><p>media 就是大名鼎鼎的 media query 使用的规则了，它能够对设备的类型进行一些判断。在 media 的区块内，是普通规则列表。</p></blockquote><div class="language-"><pre><code>@media print {\n    body { font-size: 10pt }\n}\n</code></pre></div><h3 id="page"><a class="header-anchor" href="#page" aria-hidden="true">#</a> @page</h3><blockquote><p>page 用于分页媒体访问网页时的表现设置，页面是一种特殊的盒模型结构，除了页面本身，还可以设置它周围的盒。比如打印机</p></blockquote><div class="language-"><pre><code>@page {\n  size: 8.5in 11in;\n  margin: 10%;\n\n  @top-left {\n    content: &quot;Hamlet&quot;;\n  }\n  @top-right {\n    content: &quot;Page &quot; counter(page);\n  }\n}\n</code></pre></div><h3 id="counter-style"><a class="header-anchor" href="#counter-style" aria-hidden="true">#</a> @counter-style</h3><blockquote><p>counter-style 产生一种数据，用于定义列表项的表现。</p></blockquote><div class="language-"><pre><code>@counter-style triangle {\n  system: cyclic;\n  symbols: ‣;\n  suffix: &quot; &quot;;\n}\n</code></pre></div><h3 id="key-frames"><a class="header-anchor" href="#key-frames" aria-hidden="true">#</a> @key-frames</h3><blockquote><p>keyframes 产生一种数据，用于定义动画关键帧。</p></blockquote><div class="language-"><pre><code>@keyframes diagonal-slide {\n\n  from {\n    left: 0;\n    top: 0;\n  }\n\n  to {\n    left: 100px;\n    top: 100px;\n  }\n\n}\n</code></pre></div><h3 id="fontface"><a class="header-anchor" href="#fontface" aria-hidden="true">#</a> @fontface</h3><blockquote><p>fontface 用于定义一种字体，icon font 技术就是利用这个特性来实现的。</p></blockquote><div class="language-"><pre><code>@font-face {\n  font-family: Gentium;\n  src: url(http://example.com/fonts/Gentium.woff);\n}\n\np { font-family: Gentium, serif; }\n</code></pre></div><h3 id="support"><a class="header-anchor" href="#support" aria-hidden="true">#</a> @support</h3><p>support 检查环境的特性，它与 media 比较类似。低版本不支持</p><h3 id="namespace"><a class="header-anchor" href="#namespace" aria-hidden="true">#</a> @namespace</h3><p>用于跟 XML 命名空间配合的一个规则，表示内部的 CSS 选择器全都带上特定命名空间。</p><h3 id="viewport"><a class="header-anchor" href="#viewport" aria-hidden="true">#</a> @viewport</h3><p>用于设置视口的一些特性，不过兼容性目前不是很好，多数时候被 HTML 的 meta 代替。</p><h3 id="其它"><a class="header-anchor" href="#其它" aria-hidden="true">#</a> 其它</h3><p>除了以上这些，还有些目前不太推荐使用的 at 规则。</p><ul><li>@color-profile 是 SVG1.0 引入的 CSS 特性，但是实现状况不怎么好。</li><li>@document 还没讨论清楚，被推迟到了 CSS4 中。</li><li>@font-feature-values 。</li></ul><h2 id="普通规则"><a class="header-anchor" href="#普通规则" aria-hidden="true">#</a> 普通规则</h2><p>qualified rule 主要是由选择器和声明区块构成。声明区块又由属性和值构成。</p><ul><li>普通规则 <ul><li>选择器</li><li>声明列表 <ul><li>属性</li><li>值 <ul><li>值的类型</li><li>函数</li></ul></li></ul></li></ul></li></ul><h3 id="选择器"><a class="header-anchor" href="#选择器" aria-hidden="true">#</a> 选择器</h3><p>语法结构<br><a data-fancybox title="image.png" href="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3615a0fff44c479882a614b256dde600~tplv-k3u1fbpfcp-watermark.image?"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3615a0fff44c479882a614b256dde600~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></a><br><a data-fancybox title="image.png" href="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9294e2fdd7ca4bf8b3de9ae9fd25fca6~tplv-k3u1fbpfcp-watermark.image?"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9294e2fdd7ca4bf8b3de9ae9fd25fca6~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></a></p><h3 id="声明：属性和值"><a class="header-anchor" href="#声明：属性和值" aria-hidden="true">#</a> 声明：属性和值</h3><blockquote><p>声明部分是一个由“属性: 值”组成的序列。</p></blockquote><p>属性是由中划线、下划线、字母等组成的标识符，CSS 还支持使用反斜杠转义。我们需要注意的是：属性不允许使用连续的两个中划线开头，这样的属性会被认为是 CSS 变量。</p><p>在<code>CSS Variables</code> 标准中，以双中划线开头的属性被当作变量，与之配合的则是 var 函数：</p><div class="language-"><pre><code>:root {\n  --main-color: #06c;\n  --accent-color: #006;\n}\n/* The rest of the CSS file */\n#foo h1 {\n  color: var(--main-color);\n}\n</code></pre></div><p>CSS 属性值可能是以下类型。</p><ul><li>CSS 范围的关键字：initial，unset，inherit，任何属性都可以的关键字。</li><li>字符串：比如 content 属性。</li><li>URL：使用 url() 函数的 URL 值。</li><li>整数 / 实数：比如 flex 属性。</li><li>维度：单位的整数 / 实数，比如 width 属性。</li><li>百分比：大部分维度都支持。</li><li>颜色：比如 background-color 属性。</li><li>图片：比如 background-image 属性。</li><li>2D 位置：比如 background-position 属性。</li><li>函数：来自函数的值，比如 transform 属性。</li></ul><p>CSS 支持一批特定的计算型函数：</p><ul><li>calc()</li><li>max()</li><li>min()</li><li>clamp()</li><li>toggle()</li><li>attr()</li></ul><p><strong>calc()</strong> 函数是基本的表达式计算，它支持加减乘除四则运算。在针对维度进行计算时，calc() 函数允许不同单位混合运算，这非常的有用。</p><div class="language-"><pre><code>section {\n  float: left;\n  margin: 1em; border: solid 1px;\n  width: calc(100%/3 - 2*1em - 2*1px);\n}\n</code></pre></div><p><strong>max()、min() 和 clamp()</strong> 则是一些比较大小的函数，max() 表示取两数中较大的一个，min() 表示取两数之中较小的一个，clamp() 则是给一个值限定一个范围，超出范围外则使用范围的最大或者最小值。</p><p>toggle() 函数在规则选中多于一个元素时生效，它会在几个值之间来回切换，比如我们要让一个列表项的样式圆点和方点间隔出现，可以使用下面代码：</p><div class="language-"><pre><code>ul { list-style-type: toggle(circle, square); }\n</code></pre></div><p>attr() 函数允许 CSS 接受属性值的控制。</p>',55);l.render=function(t,r,l,o,n,s){return a(),e("div",null,[i])};export default l;export{r as __pageData};
