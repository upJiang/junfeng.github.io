import{g as n,f as s,E as e}from"./common-d6bd45c0.js";const t='{"title":"Map 的妙用——两数求和问题","frontmatter":{},"headers":[{"level":2,"title":"Map 的妙用——两数求和问题","slug":"map-的妙用——两数求和问题"},{"level":2,"title":"强大的双指针法(数组一定要有序)","slug":"强大的双指针法-数组一定要有序"},{"level":2,"title":"三数求和问题(对撞指针法)","slug":"三数求和问题-对撞指针法"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"docs/algorithm/array.md","lastUpdated":1645629154789.889}';var a={};const m=e('<h2 id="map-的妙用——两数求和问题"><a class="header-anchor" href="#map-的妙用——两数求和问题" aria-hidden="true">#</a> Map 的妙用——两数求和问题</h2><blockquote><p>真题描述： 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p></blockquote><p>给定 nums = [2, 7, 11, 15], target = 9 因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1]</p><p>最淳朴的解法：两层循环来遍历同一个数组；第一层循环遍历的值记为 a，第二层循环时遍历的值记为 b；若 a+b = 目标值，那么 a 和 b 对应的数组下标就是我们想要的答案。但是这样做的时间复杂度是：O(n^2)</p><p>记住一个结论：<strong>几乎所有的求和问题，都可以转化为求差问题</strong>。 这道题就是一个典型的例子，通过把求和问题转化为求差问题，事情会变得更加简单。</p><p>思路：使用 Map 去存储已经遍历过的数字及其对应的索引值，<strong>map 的 key 是遍历的数字，值是索引</strong>。<br> 判断依据：差值就是 taget 值减去遍历的数字，如果差值在 Map 记录中存在，那么答案就出来了，就是当前的数字以及 Map 记录中 key 为差值的那一项</p><p><a data-fancybox title="img" href="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/16/171815cf9cc83f3f~tplv-t2oaga2asx-watermark.awebp"><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/16/171815cf9cc83f3f~tplv-t2oaga2asx-watermark.awebp" alt="img"></a></p><p>使用 for 循环实现</p><div class="language-"><pre><code>const twoSum = (nums, target)=&gt; {\n    // 这里我用对象来模拟 map 的能力\n    const diffs = {}\n    // 缓存数组长度\n    const len = nums.length\n    // 遍历数组\n    for(let i=0;i&lt;len;i++) {\n        // 判断 target 值减去当前遍历数字是否存在于 Map 中，存在则找到答案啦\n        if(diffs[target-nums[i]] !== undefined) {\n            // 若存在，返回这个差值对应的 Map key值的索引，以及当前索引\n            return [diffs[target - nums[i]], i]\n        }\n        // 若不存在，则记录当前值\n        diffs[nums[i]]=i\n    }\n};\n</code></pre></div><p>使用 map 实现</p><div class="language-"><pre><code>const twoSum = (nums, target)=&gt; {\n    // 这里我用对象来模拟 map 的能力\n    const diffs = new Map()\n    // 缓存数组长度\n    const len = nums.length\n\n    for(let i=0;i&lt;len;i++) {\n        console.log(diffs);\n        // 判断 target 值减去当前遍历数字是否存在于 Map 中，存在则找到答案啦\n        if(diffs.get(target - nums[i]) !== undefined) {\n            // 若存在，返回这个差值对应的 Map key值的索引，以及当前索引\n            return [diffs.get(target - nums[i]), i]\n        }\n        // 若不存在，则记录当前值\n        diffs.set(nums[i],i)\n    }\n};\n</code></pre></div><h2 id="强大的双指针法-数组一定要有序"><a class="header-anchor" href="#强大的双指针法-数组一定要有序" aria-hidden="true">#</a> 强大的双指针法(数组一定要有序)</h2><blockquote><p>合并两个有序数组：给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。</p></blockquote><p>输入:<br> nums1 = [2,3,6,7,8], m = 5 <br> nums2 = [3,4,5], n = 3 <br> 输出: [1,3,3,4,5,6,7,8] <br></p><p>思路：</p><ul><li>将 nums1 的长度变成两数组之和，即：nums1 = [2,3,6,7,8,0,0,0]，nums1 尾部索引 为 k = m + n -1</li><li>定义两个指针，head 分别指向两个数组的尾部, 分别为 m - 1,n - 1</li><li>当两个指针都大于0时，比较对应值的大小，较大的那一方指针向前移动一位，nums1 的指针也向前移动一位，并且 nums1[k] = 较大值</li><li>遍历到最后，如果 m &gt; n，因为我们初始化的时候就是拿的 nums1，所以不需要做任何操作；如果 m &lt; n，那么我们把 nums2 后面那几个没有比较的数据插入到 nums1 即可</li></ul><div class="language-"><pre><code>const merge = function(nums1, m, nums2, n) {\n    // 初始化两个指针的指向，初始化 nums1 尾部索引k\n    let i = m - 1, j = n - 1, k = m + n - 1\n    // 当两个数组都没遍历完时，较大那一方的指针向前移动一位，并且 nums1 的指针 k 也向前移动一位\n    while(i &gt;= 0 &amp;&amp; j &gt;= 0) {\n        // 取较大的值，从末尾往前填补\n        if(nums1[i] &gt;= nums2[j]) {\n            nums1[k] = nums1[i] \n            i-- \n        } else {\n            nums1[k] = nums2[j] \n            j-- \n        }\n        k--\n    }\n    // nums2 留下的情况，特殊处理一下,把 nums2 后面那几个没有比较的数据插入到 nums1 \n    while(j&gt;=0) {\n        nums1[k] = nums2[j]  \n        k-- \n        j--\n    }\n    return nums1\n};\nconsole.log(merge([2,3,6,7,8],5,[3,4,5],3));  // [1,3,3,4,5,6,7,8]\n</code></pre></div><h2 id="三数求和问题-对撞指针法"><a class="header-anchor" href="#三数求和问题-对撞指针法" aria-hidden="true">#</a> 三数求和问题(对撞指针法)</h2><blockquote><p>真题描述：给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且<strong>不重复</strong>的三元组。</p></blockquote><p>给定数组 nums = [-1, 0, 1, 2, -1, -4]， 满足要求的三元组集合为： [ [-1, 0, 1], [-1, -1, 2] ]</p><p><a data-fancybox title="img" href="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/15/170de65ecf8b277f~tplv-t2oaga2asx-watermark.awebp"><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/15/170de65ecf8b277f~tplv-t2oaga2asx-watermark.awebp" alt="img"></a></p><p>思路：</p><ul><li>双指针法只适用有序的数组，通过 sort 对数组先进行排序。定义结果数组 res = []</li><li>循环遍历数组，每次固定当前遍历值 nums[i]，定义两个指针分别位于固定值后面的首尾:j = i+1（首）,k = arr.length - 1。明白 k 肯定大于 j 的，如果遇到相同数据直接跳过 continue</li><li>遍历时，在满足 j &lt; k 的条件下：判断 nums[i] + nums[j] + nums[k] = 0。如果大于0，说明 k 偏大，需要左移，即 k--；如果小于0，说明 j 偏小，需要右移 即 j++。同时如果遇到相同的数据则直接跳过进行移动操作。</li><li>在遍历过程中，遇到满足条件的将 res.push([nums[i],nums[j],nums[k]])，并且两个指针都要移动，并且判断是否遇到相同数据情况</li></ul><div class="language-"><pre><code>const threeSum = function(nums) {\n    // 用于存放结果数组\n    let res = [] \n    // 给 nums 排序\n    nums = nums.sort((a,b)=&gt;{\n        return a-b\n    })\n    // 缓存数组长度\n    const len = nums.length\n    // 注意我们遍历到倒数第三个数就足够了，因为左右指针会遍历后面两个数\n    for(let i=0;i&lt;len-2;i++) {\n        // 左指针 j\n        let j=i+1 \n        // 右指针k\n        let k=len-1   \n        // 如果遇到重复的数字，则跳过\n        if(i&gt;0&amp;&amp;nums[i]===nums[i-1]) {\n            continue\n        }\n        while(j&lt;k) {\n            // 三数之和小于0，左指针前进\n            if(nums[i]+nums[j]+nums[k]&lt;0){\n                j++\n               // 处理左指针元素重复的情况\n               while(j&lt;k&amp;&amp;nums[j]===nums[j-1]) {\n                    j++\n                }\n            } else if(nums[i]+nums[j]+nums[k]&gt;0){\n                // 三数之和大于0，右指针后退\n                k--\n               \n               // 处理右指针元素重复的情况\n               while(j&lt;k&amp;&amp;nums[k]===nums[k+1]) {\n                    k--\n                }\n            } else {\n                // 得到目标数字组合，推入结果数组\n                res.push([nums[i],nums[j],nums[k]])\n                \n                // 左右指针一起前进\n                j++  \n                k--\n               \n                // 若左指针元素重复，跳过\n                while(j&lt;k&amp;&amp;nums[j]===nums[j-1]) {\n                    j++\n                }  \n               \n               // 若右指针元素重复，跳过\n               while(j&lt;k&amp;&amp;nums[k]===nums[k+1]) {\n                    k--\n                }\n            }\n        }\n    }\n    \n    // 返回结果数组\n    return res\n};\n</code></pre></div><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>学到了两个方法：Map保存遍历值（求和转求差）、双指针法（同位置移动、固定值+对撞指针）仅针对有序数组</p><p>当遇到求和的问题，要转换成求差，通过Map去保存遍历数据，达到降低时间复杂度的效果</p><p>当遇到 “有序”和“数组”：立刻把双指针法调度进你的大脑内存。普通双指针走不通，立刻想对撞指针！</p><p>即便数组题目中并没有直接给出“有序”这个关键条件，我们在发觉普通思路走不下去的时候，也应该及时地尝试手动对其进行排序试试看有没有新的切入点——没有条件，创造条件也要上。</p><p>指针法好像就是，在满足条件的情况下，移动的时候比较大小，然后选择移动的目标或者方向，判断条件</p>',30);a.render=function(e,t,a,i,u,l){return s(),n("div",null,[m])};export default a;export{t as __pageData};
