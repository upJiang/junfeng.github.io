import{g as t,f as e,E as r}from"./common-d6bd45c0.js";const o='{"title":"为什么link一个CSS要用href，而引入js要用src呢？","frontmatter":{},"headers":[{"level":2,"title":"script","slug":"script"},{"level":2,"title":"img","slug":"img"},{"level":2,"title":"picture","slug":"picture"},{"level":2,"title":"video","slug":"video"},{"level":2,"title":"audio","slug":"audio"},{"level":2,"title":"iframe","slug":"iframe"}],"relativePath":"docs/reStudy/html_tramslate.md","lastUpdated":1639657876288.8884}';var i={};const a=r('<blockquote><p>替换型元素是把文件的内容引入，替换掉自身位置的一类标签。</p></blockquote><h4 id="为什么link一个css要用href，而引入js要用src呢？"><a class="header-anchor" href="#为什么link一个css要用href，而引入js要用src呢？" aria-hidden="true">#</a> 为什么link一个CSS要用href，而引入js要用src呢？</h4><p>凡是替换型元素，都是使用 src 属性来引用文件的，链接型元素是使用 href 标签的。</p><h2 id="script"><a class="header-anchor" href="#script" aria-hidden="true">#</a> script</h2><p>script 标签的两种用法：</p><div class="language-"><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\nconsole.log(&quot;Hello world!&quot;);\n&lt;/script&gt;\n\n\n&lt;script type=&quot;text/javascript&quot; src=&quot;my.js&quot;&gt;&lt;/script&gt;\n</code></pre></div><p>这个例子中，我们展示了两种 script 标签的写法，一种是直接把脚本代码写在 script 标签之间，另一种是把代码放到独立的 js 文件中，用 src 属性引入。</p><h2 id="img"><a class="header-anchor" href="#img" aria-hidden="true">#</a> img</h2><p>img 标签的作用是引入一张图片。这个标签是没有办法像 script 标签那样作为非替换型标签来使用的，它必须有 src 属性才有意义。</p><p>如果一定不想要引入独立文件，可以使用 data uri，我们来看个实际的例子：</p><div class="language-"><pre><code> &lt;img src=&#39;data:image/svg+xml;charset=utf8,&lt;svg version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;rect width=&quot;300&quot; height=&quot;100&quot; style=&quot;fill:rgb(0,0,255);stroke-width:1;stroke:rgb(0,0,0)&quot;/&gt;&lt;/svg&gt;&#39;/&gt;\n</code></pre></div><p>这个例子中我们使用了 data uri 作为图片的 src，这样，并没有产生独立的文件，客观上做到了和内联相同的结果，这是一个常用的技巧。</p><p>此处要重点提到一个属性，<strong>alt 属性</strong>，这个属性很难被普通用户感知，对于视障用户非常重要，可以毫不夸张地讲，给 img 加上 alt 属性，已经做完了可访问性的一半。</p><p>img 标签还有一组重要的属性，那就是 <strong>srcset 和 sizes</strong>，它们是 src 属性的升级版（所以我们前面讲 img 标签必须有 src 属性，这是不严谨的说法）。</p><p>这两个属性的作用是在不同的屏幕大小和特性下，使用不同的图片源。下面一个例子也来自 MDN，它展示了 srcset 和 sizes 的用法</p><div class="language-"><pre><code>&lt;img srcset=&quot;elva-fairy-320w.jpg 320w,\n             elva-fairy-480w.jpg 480w,\n             elva-fairy-800w.jpg 800w&quot;\n     sizes=&quot;(max-width: 320px) 280px,\n            (max-width: 480px) 440px,\n            800px&quot;\n     src=&quot;elva-fairy-800w.jpg&quot; alt=&quot;Elva dressed as a fairy&quot;&gt;\n</code></pre></div><p>srcset 提供了根据屏幕条件选取图片的能力，但是其实更好的做法，是使用 picture 元素。</p><h2 id="picture"><a class="header-anchor" href="#picture" aria-hidden="true">#</a> picture</h2><p>picture 元素可以根据屏幕的条件为其中的 img 元素提供不同的源，它的基本用法如下：</p><div class="language-"><pre><code>&lt;picture&gt;\n  &lt;source srcset=&quot;image-wide.png&quot; media=&quot;(min-width: 600px)&quot;&gt;\n  &lt;img src=&quot;image-narrow.png&quot;&gt;\n&lt;/picture&gt;\n</code></pre></div><p>picture 元素的设计跟 audio 和 video 保持了一致（稍后我会为你讲解这两个元素），它跟 img 搭配 srcset 和 sizes 不同，它使用 source 元素来指定图片源，并且支持多个。</p><h2 id="video"><a class="header-anchor" href="#video" aria-hidden="true">#</a> video</h2><p>在 HTML5 早期的设计中，video 标签跟 img 标签类似，也是使用 src 属性来引入源文件的，不过，我想应该是考虑到了各家浏览器支持的视频格式不同，现在的 video 标签跟 picture 元素一样，也是提倡使用 source 的。</p><p>下面例子是一个古典的 video 用法：</p><div class="language-"><pre><code>&lt;video controls=&quot;controls&quot; src=&quot;movie.ogg&quot;&gt;\n&lt;/video&gt;\n</code></pre></div><p>这个例子中的代码用 src 来指定视频的源文件。但是因为一些历史原因，浏览器对视频的编码格式兼容问题分成了几个派系，这样，对于一些兼容性要求高的网站，我们使用单一的视频格式是不合适的。</p><p>现在的 video 标签可以使用 <strong>source</strong> 标签来指定接入多个视频源。</p><div class="language-"><pre><code>&lt;video controls=&quot;controls&quot; &gt;\n  &lt;source src=&quot;movie.webm&quot; type=&quot;video/webm&quot; &gt;\n  &lt;source src=&quot;movie.ogg&quot; type=&quot;video/ogg&quot; &gt;\n  &lt;source src=&quot;movie.mp4&quot; type=&quot;video/mp4&quot;&gt;\n  You browser does not support video.\n&lt;/video&gt;\n</code></pre></div><p>从这个例子中，我们可以看到，source 标签除了支持 media 之外，还可以使用 type 来区分源文件的使用场景。</p><p>video 中还支持一种标签：track。</p><p>track 是一种播放时序相关的标签，它最常见的用途就是字幕。track 标签中，必须使用 srclang 来指定语言，此外，track 具有 kind 属性，共有五种。</p><ul><li>subtitles：就是字幕了，不一定是翻译，也可能是补充性说明。</li><li>captions：报幕内容，可能包含演职员表等元信息，适合听障人士或者没有打开声音的人了解音频内容。</li><li>descriptions：视频描述信息，适合视障人士或者没有视频播放功能的终端打开视频时了解视频内容。</li><li>chapters：用于浏览器视频内容。</li><li>metadata：给代码提供的元信息，对普通用户不可见。</li></ul><p>一个完整的 video 标签可能会包含多种 track 和多个 source，这些共同构成了一个视频播放所需的全部信息。</p><h2 id="audio"><a class="header-anchor" href="#audio" aria-hidden="true">#</a> audio</h2><p>跟 picture 和 video 两种标签一样，audio 也可以使用 source 元素来指定源文件。我们看一下例子：</p><div class="language-"><pre><code>&lt;audio controls&gt;\n  &lt;source src=&quot;song.mp3&quot; type=&quot;audio/mpeg&quot;&gt;\n  &lt;source src=&quot;song.ogg&quot; type=&quot;audio/ogg&quot;&gt;\n  &lt;p&gt;You browser does not support audio.&lt;/p&gt;\n&lt;/audio&gt;\n</code></pre></div><p>但比起 video，audio 元素的历史问题并不严重，所以使用 src 也是没有问题的。</p><h2 id="iframe"><a class="header-anchor" href="#iframe" aria-hidden="true">#</a> iframe</h2><blockquote><p>这个标签能够嵌入一个完整的网，不过，在移动端，iframe 受到了相当多的限制，它无法指定大小，里面的内容会被完全平铺到父级页面上。</p></blockquote><p>同时很多网页也会通过 http 协议头禁止自己被放入 iframe 中。</p><p>iframe 标签也是各种安全问题的重灾区。opener、<a href="http://window.name" target="_blank" rel="noopener noreferrer">window.name</a>、甚至 css 的 opacity 都是黑客可以利用的漏洞。</p><p>因此，在 2019 年，当下这个时间点，任何情况下我都不推荐在实际开发中用以前的 iframe。当然，不推荐使用是一回事，因为没人能保证不遇到历史代码，我们还是应该了解一下 iframe 的基本用法：</p><div class="language-"><pre><code>&lt;iframe src=&quot;http://time.geekbang.org&quot;&gt;&lt;/iframe&gt;\n</code></pre></div><p>这个例子展示了古典的 iframe 用法。</p><p>在新标准中，为 iframe 加入了 sandbox 模式和 srcdoc 属性，这样，给 iframe 带来了一定的新场景。我们来看看例子：</p><div class="language-"><pre><code>&lt;iframe sandbox srcdoc=&quot;&lt;p&gt;Yeah, you can see it &lt;a href=&quot;/gallery?mode=cover&amp;amp;amp;page=1&quot;&gt;in my gallery&lt;/a&gt;.&quot;&gt;&lt;/iframe&gt;\n</code></pre></div><p>这个例子中，使用 srcdoc 属性创建了一个新的文档，嵌入在 iframe 中展示，并且使用了 sandbox 来隔离。这样，这个 iframe 就不涉及任何跨域问题了。</p>',47);i.render=function(r,o,i,s,p,c){return e(),t("div",null,[a])};export default i;export{o as __pageData};
