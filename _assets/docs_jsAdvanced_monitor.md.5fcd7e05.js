import{g as n,f as e,E as t}from"./common-d6bd45c0.js";const i='{"title":"如何埋点","frontmatter":{},"headers":[{"level":2,"title":"如何埋点","slug":"如何埋点"},{"level":3,"title":"手动埋点","slug":"手动埋点"},{"level":3,"title":"可视化埋点","slug":"可视化埋点"},{"level":3,"title":"无埋点","slug":"无埋点"}],"relativePath":"docs/jsAdvanced/monitor.md","lastUpdated":1643031782863.3623}';var a={};const l=t('<p>在线上项目中，需要<strong>统计产品中用户行为和使用情况</strong>，从而可以从用户和产品的角度去了解用户群体，从而升级和迭代产品，使其更加贴近用户。</p><p>用户行为数据可以通过前端数据监控的方式获得，除此之外，前端还需要实现性能监控和异常监控。</p><ul><li>数据监控 <ul><li>PV访问来量（Page View）</li><li>UV访问数（Unique Visitor）</li><li>记录操作系统和浏览器</li><li>记录用户在页面的停留时间</li><li>进入当前页面的来源网页（也就是从哪进来的转化）</li></ul></li><li>性能监控 <ul><li>白屏时长</li><li>重要页面的http请求时间</li><li>重要页面的渲染时间</li><li>首屏加载时长</li></ul></li><li>异常监控 <ul><li>前端脚本执行报错</li><li>样式丢失的异常监控</li></ul></li></ul><p>实现前端监控有三个步骤：</p><ul><li>前端埋点和上报</li><li>数据处理</li><li>数据分析。</li></ul><h2 id="如何埋点"><a class="header-anchor" href="#如何埋点" aria-hidden="true">#</a> 如何埋点</h2><h3 id="手动埋点"><a class="header-anchor" href="#手动埋点" aria-hidden="true">#</a> 手动埋点</h3><p>使用 js 代码拿到一些进本信息</p><div class="language-"><pre><code>//域名\nconst domainURL = document.domainURL.document.URL \n//页面标题\nconst title = document.title\n//分辨率\nconst screen = window.screen\n//颜色深度\nconst colorDepth = window.screen.colorDepth\n//Referrer\nconst Referrer = document.referrer\n//客户端语言\nconst language = navigator.language\n\nconsole.log(&#39;域名:&#39;+domainURL+&#39;\\n页面标题&#39;+title+&#39;\\n分辨率&#39;+screen+&#39;\\n颜色深度&#39;+colorDepth+&#39;\\nReferrer&#39;+Referrer+&#39;\\n客户端语言&#39;+language)\n</code></pre></div><p>通过Performance 我们便能拿到DNS 解析时间、TCP 建立连接时间、首页白屏时间、DOM 渲染完成时间、页面 load 时间等</p><div class="language-"><pre><code>//拿到Performance并且初始化一些参数\nlet timing = performance.timing,\n    start = timing.navigationStart,\n    dnsTime = 0,\n    tcpTime = 0,\n    firstPaintTime = 0,\n    domRenderTime = 0,\n    loadTime = 0;\n//根据提供的api和属性，拿到对应的时间\ndnsTime = timing.domainLookupEnd - timing.domainLookupStart;\ntcpTime = timing.connectEnd - timing.connectStart;\nfirstPaintTime = timing.responseStart - start;\ndomRenderTime = timing.domContentLoadedEventEnd - start;\nloadTime = timing.loadEventEnd - start;\n\nconsole.log(&#39;DNS解析时间:&#39;, dnsTime, \n            &#39;\\nTCP建立时间:&#39;, tcpTime, \n            &#39;\\n首屏时间:&#39;, firstPaintTime,\n            &#39;\\ndom渲染完成时间:&#39;, domRenderTime, \n            &#39;\\n页面onload时间:&#39;, loadTime);\n</code></pre></div><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ac1857fed8d4b2e948576cdd58a6c6b~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"> 拿到数据以后我们可以在提交，或者通过图片的方式去提交埋点内容</p><div class="language-"><pre><code>  // 页面加载时发送埋点请求\n$(document).ready(function(){\n // ... 这里存在一些业务逻辑\n sendRequest(params);\n});\n\n// 按钮点击时发送埋点请求\n$(&#39;button&#39;).click(function(){\n   //  这里存在一些业务逻辑\n   sendRequest(params);\n});\n\n// 通过伪装成 Image 对象，传递给后端，防止跨域\nlet img = new Image(1, 1);\nlet src = `http://aaaaa/api/test.jpg?args=${encodeURIComponent(args)}`;\nimg.src = src;\n\n//css实现的埋点\n.link:active::after{\ncontent: url(&quot;http://www.example.com?action=yourdata&quot;);\n}\n&lt;a class=&quot;link&quot;&gt;点击我，会发埋点数据&lt;/a&gt;\n\n//data自定义属性，rangjs去拿到属性绑定事件，实现埋点\n//&lt;button data-mydata=&quot;{key:&#39;uber_comt_share_ck&#39;, act: &#39;click&#39;,msg:{}}&quot;&gt;打车&lt;/button&gt;\n</code></pre></div><p>这种埋点方式虽然能精准的监控到用户的行为，和网页性能等数据，但是你会发现，非常繁琐，需要大量的工作量，当然这部分工作也有人帮我们做了，比如像友盟、百度统计等给我们其实提供了服务。我们可以按照他们的流程使用手动埋点</p><h3 id="可视化埋点"><a class="header-anchor" href="#可视化埋点" aria-hidden="true">#</a> 可视化埋点</h3><p>这种埋点方案，又叫无痕埋点，解放了前端手动操的工作量，其实本质就是用系统去插入本来需要手动插入的埋点，这种埋点方式由于自带技术壁垒，所以开发人员基本基本不用考虑，花钱即可 ，比较靠谱的服务商 国外的Mixpanel，国内较早支持可视化埋点的有TalkingData、诸葛 IO，腾讯 MTA 等</p><h3 id="无埋点"><a class="header-anchor" href="#无埋点" aria-hidden="true">#</a> 无埋点</h3><p>无埋点并不是说不需要埋点，而是全部埋点，前端的任意一个事件都被绑定一个标识，所有的事件都别记录下来。通过定期上传记录文件，配合文件解析，解析出来我们想要的数据，并生成可视化报告供专业人员分析因此实现“无埋点”统计。</p><p>比如在网页里面插入一段 js 代码，进行全量监控</p>',19);a.render=function(t,i,a,r,o,d){return e(),n("div",null,[l])};export default a;export{i as __pageData};
