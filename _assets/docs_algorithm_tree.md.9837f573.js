import{g as n,f as e,E as r}from"./common-d6bd45c0.js";const l='{"title":"“遍历三兄弟”的迭代实现","frontmatter":{},"headers":[{"level":2,"title":"“遍历三兄弟”的迭代实现","slug":"“遍历三兄弟”的迭代实现"},{"level":2,"title":"层序遍历的衍生问题","slug":"层序遍历的衍生问题"},{"level":2,"title":"翻转二叉树","slug":"翻转二叉树"}],"relativePath":"docs/algorithm/tree.md","lastUpdated":1646838626543.448}';var t={};const o=r('<p>重点掌握的三个命题：</p><ul><li>迭代法实现二叉树的先、中、后序遍历</li><li>二叉树层序遍历的衍生问题</li><li>翻转二叉树</li></ul><h2 id="“遍历三兄弟”的迭代实现"><a class="header-anchor" href="#“遍历三兄弟”的迭代实现" aria-hidden="true">#</a> “遍历三兄弟”的迭代实现</h2><blockquote><p>题目描述：给定一个二叉树，返回它的前序（先序）遍历序列。</p></blockquote><p>示例:<br> 输入: [1,null,2,3]</p><div class="language-"><pre><code>1   \n \\   \n  2   \n /  \n3 \n</code></pre></div><p>输出: [1,2,3] <br> 进阶: 递归算法很简单，你可以通过迭代算法完成吗？ <br></p><p>二叉树的格式</p><div class="language-"><pre><code>const root = {\n  val: &quot;A&quot;,\n  left: {\n    val: &quot;B&quot;,\n    left: {\n      val: &quot;D&quot;\n    },\n    right: {\n      val: &quot;E&quot;\n    }\n  },\n  right: {\n    val: &quot;C&quot;,\n    right: {\n      val: &quot;F&quot;\n    }\n  }\n};\n</code></pre></div><p><strong>先序遍历</strong><br> 思路：</p><ul><li>明白前序遍历就是：先遍历<code>根结点</code>、然后<code>遍历左孩子</code>、最后<code>遍历右孩子</code></li><li>定义一个栈用来承接树的内容，我们对树进行入栈，入栈顺序为 <code>右-左</code>，根节点的值直接 push 到结果数组里。</li><li>那么当我们出栈的时候就是按照 <code>左-右</code> 的顺序了，我们每次把结点值 push 到结果数组。</li><li>当栈空时，返回结果</li></ul><p>编码实现</p><div class="language-"><pre><code>const preorderTraversal = function(root) {\n  // 定义结果数组\n  const res = []  \n  // 处理边界条件\n  if(!root) {\n      return res\n  }\n  // 初始化栈结构\n  const stack = [] \n  // 首先将根结点入栈\n  stack.push(root)  \n  // 若栈不为空，则重复出栈、入栈操作\n  while(stack.length) {\n      // 将栈顶结点记为当前结点\n      const cur = stack.pop() \n      // 当前结点就是当前子树的根结点，把这个结点放在结果数组的尾部\n      res.push(cur.val)\n      // 若当前子树根结点有右孩子，则将右孩子入栈\n      if(cur.right) {\n          stack.push(cur.right)\n      }\n      // 若当前子树根结点有左孩子，则将左孩子入栈\n      if(cur.left) {\n          stack.push(cur.left)\n      }\n  }\n  // 返回结果数组\n  return res\n};\n</code></pre></div><p><strong>后序遍历</strong><br> 那么如果是后序遍历的话，遍历顺序应该是 <code>左-右-根</code>。<br> 思路</p><ul><li>我们在 push 结果的时候，使用 unshift 置换一下顺序，输出结果本来是 <code>根-左-右</code> 变成了 <code>右-左-根</code></li><li>那么我们再把 <code>右-左</code> 变成 <code>左-右</code> 即可，把左右入栈的顺序调整一下即可</li></ul><p>代码实现</p><div class="language-"><pre><code>const postorderTraversal = function(root) {\n  // 定义结果数组\n  const res = []  \n  // 处理边界条件\n  if(!root) {\n      return res\n  }\n  // 初始化栈结构\n  const stack = [] \n  // 首先将根结点入栈\n  stack.push(root)  \n  // 若栈不为空，则重复出栈、入栈操作\n  while(stack.length) {\n      // 将栈顶结点记为当前结点\n      const cur = stack.pop() \n      // 当前结点就是当前子树的根结点，把这个结点放在结果数组的头部\n      res.unshift(cur.val)\n      // 若当前子树根结点有左孩子，则将左孩子入栈\n      if(cur.left) {\n        stack.push(cur.left)\n      }  \n      // 若当前子树根结点有右孩子，则将右孩子入栈\n      if(cur.right) {\n        stack.push(cur.right)\n      }\n  }\n  // 返回结果数组\n  return res\n};\n</code></pre></div><p><strong>中序遍历</strong><br> 思路：<br></p><ul><li>中序遍历的序列规则是 <code>左-中-右</code> ，这意味着我们必须首先定位到最左的叶子结点。在这个定位的过程中，必然会途径目标结点的父结点、爷爷结点和各种辈分的祖宗结点</li><li>途径过的每一个结点，我们都要及时地把它入栈。这样当最左的叶子结点出栈时，第一个回溯到的就是它的父结点，然后就在最左节点处开始左右遍历处理结果</li></ul><div class="language-"><pre><code>const inorderTraversal = function(root) {\n  // 定义结果数组\n  const res = []  \n  // 初始化栈结构\n  const stack = []   \n  // 用一个 cur 结点充当游标\n  let cur = root  \n  // 当 cur 不为空、或者 stack 不为空时，重复以下逻辑\n  while(cur || stack.length) {\n      // 这个 while 的作用是把寻找最左叶子结点的过程中，途径的所有结点都记录下来 \n      while(cur) {\n          // 将途径的结点入栈\n          stack.push(cur)  \n          // 继续搜索当前结点的左孩子\n          cur = cur.left  \n      }\n      // 取出栈顶元素\n      cur = stack.pop()  \n      // 将栈顶元素入栈\n      res.push(cur.val)  \n      // 尝试读取 cur 结点的右孩子\n      cur = cur.right\n  }\n  // 返回结果数组\n  return res\n};\n</code></pre></div><p>代码深度解析</p><ul><li><ol><li>两个 while ：内层的 while 的作用是在寻找最左叶子结点的过程中，把途径的所有结点都记录到 stack 里。记录工作完成后，才会走到外层 while 的剩余逻辑里——这部分逻辑的作用是从最左的叶子结点开始，一层层回溯遍历左孩子的父结点和右侧兄弟结点，进而完成整个中序遍历任务。</li></ol></li><li><ol start="2"><li>外层 while 的两个条件： cur 的存在性和stack.length 的存在性，各自是为了限制什么？</li></ol><ul><li><ol><li>stack.length 的存在性比较好理解， stack 中存储的是没有被推入结果数组 res 的待遍历元素。只要 stack 不为空，就意味着遍历没有结束， 遍历动作需要继续重复。</li></ol></li><li><ol start="2"><li>cur 的存在性就比较有趣了。它对应以下几种情况：</li></ol><ul><li><ol><li>初始态， cur 指向 root 结点，只要 root 不为空， cur 就不为空。此时判断了 cur 存在后，就会开始最左叶子结点的寻找之旅。这趟“一路向左”的旅途中， cur 始终指向当前遍历到的左孩子。</li></ol></li><li><ol start="2"><li>第一波内层 while 循环结束， cur 开始承担中序遍历的遍历游标职责。 cur 始终会指向当前栈的栈顶元素，也就是“一路向左”过程中途径的某个左孩子，然后将这个左孩子作为中序遍历的第一个结果元素纳入结果数组。假如这个左孩子是一个叶子结点，那么尝试取其右孩子时就只能取到 null ，这个 null 的存在，会导致内层循环 while 被跳过，接着就直接回溯到了这个左孩子的父结点，符合 左-&gt;根 的序列规则</li></ol></li><li><ol start="3"><li>假如当前取到的栈顶元素不是叶子结点，同时有一个右孩子，那么尝试取其右孩子时就会取到一个存在的结点。 cur 存在，于是进入内层 while 循环，重复“一路向左”的操作，去寻找这个右孩子对应的子树里最靠左的结点，然后去重复刚刚这个或回溯、或“一路向左”的过程。如果这个右孩子对应的子树里没有左孩子，那么跳出内层 while 循环之后，紧接着被纳入 res 结果数组的就是这个右孩子本身，符合 根-&gt;右 的序列规则</li></ol></li></ul></li></ul></li></ul><h2 id="层序遍历的衍生问题"><a class="header-anchor" href="#层序遍历的衍生问题" aria-hidden="true">#</a> 层序遍历的衍生问题</h2><blockquote><p>题目描述：给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p></blockquote><p>示例：<br> 二叉树：[3,9,20,null,null,15,7],</p><div class="language-"><pre><code>  3\n / \\\n9  20\n  /  \\\n 15   7\n</code></pre></div><p>返回其层次遍历结果：</p><div class="language-"><pre><code>[\n[3],\n[9,20],\n[15,7]\n]\n</code></pre></div><p>思路：<br> 我们在对二叉树进行层序遍历时，每一次 while 循环其实都对应着二叉树的某一层。只要我们在进入while循环之初，记录下这一层结点个数，然后将这个数量范围内的元素 push 进同一个数组，就能够实现二叉树的分层。</p><div class="language-"><pre><code>/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nconst levelOrder = function(root) {\n    // 初始化结果数组\n    const res = []  \n    // 处理边界条件\n    if(!root) {\n        return res\n    }  \n    // 初始化队列\n    const queue = []   \n    // 队列第一个元素是根结点\n    queue.push(root)  \n    // 当队列不为空时，反复执行以下逻辑\n    while(queue.length) {\n        // level 用来存储当前层的结点\n        const level = []  \n        // 缓存刚进入循环时的队列长度，这一步很关键，因为队列长度后面会发生改变\n        const len = queue.length  \n        // 循环遍历当前层级的结点\n        for(let i=0;i&lt;len;i++) {\n            // 取出队列的头部元素\n            const top = queue.shift()  \n            // 将头部元素的值推入 level 数组\n            level.push(top.val)\n            // 如果当前结点有左孩子，则推入下一层级\n            if(top.left) {\n                queue.push(top.left)\n            }\n            // 如果当前结点有右孩子，则推入下一层级\n            if(top.right) {\n                queue.push(top.right)\n            }\n        }\n        // 将 level 推入结果数组\n        res.push(level)\n    }\n    // 返回结果数组\n    return res\n};\n</code></pre></div><h2 id="翻转二叉树"><a class="header-anchor" href="#翻转二叉树" aria-hidden="true">#</a> 翻转二叉树</h2><blockquote><p>题目描述：翻转一棵二叉树。</p></blockquote><p>示例： 输入：</p><div class="language-"><pre><code>     4\n   /   \\\n  2     7\n / \\   / \\\n1   3 6   9\n</code></pre></div><p>输出：</p><div class="language-"><pre><code>     4\n   /   \\\n  7     2\n / \\   / \\\n9   6 3   1\n</code></pre></div><p><strong>思路分析</strong><br> 这道题是一道非常经典的递归应用题。<br> 一棵二叉树，经过翻转后会有什么特点？答案是每一棵子树的左孩子和右孩子都发生了交换。既然是“每一棵子树”，那么就意味着重复，既然涉及了重复，就没有理由不用递归。<br> 于是这道题解题思路就非常明确了：以递归的方式，遍历树中的每一个结点，并将每一个结点的左右孩子进行交换。<br></p><div class="language-"><pre><code>/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nconst invertTree = function(root) {\n    // 定义递归边界\n    if(!root) {\n        return root;\n    }\n    // 递归交换右孩子的子结点\n    let right = invertTree(root.right);\n    // 递归交换左孩子的子结点\n    let left = invertTree(root.left);\n    // 交换当前遍历到的两个左右孩子结点\n    root.left = right;\n    root.right = left;\n    return root;\n};\n</code></pre></div>',38);t.render=function(r,l,t,c,i,u){return e(),n("div",null,[o])};export default t;export{l as __pageData};
