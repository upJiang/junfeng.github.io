import{g as t,f as n,E as e}from"./common-d6bd45c0.js";const o='{"title":"初始化项目","frontmatter":{},"headers":[{"level":2,"title":"初始化项目","slug":"初始化项目"},{"level":2,"title":"编写组件","slug":"编写组件"},{"level":2,"title":"集成VTU","slug":"集成vtu"},{"level":2,"title":"集成babel跟rollup","slug":"集成babel跟rollup"},{"level":2,"title":"使用rollup打包组件","slug":"使用rollup打包组件"},{"level":2,"title":"测试组件","slug":"测试组件"},{"level":2,"title":"集成gulp","slug":"集成gulp"},{"level":2,"title":"打包样式","slug":"打包样式"},{"level":2,"title":"发布组件库","slug":"发布组件库"},{"level":2,"title":"在真实环境下使用","slug":"在真实环境下使用"},{"level":2,"title":"集成eslint","slug":"集成eslint"},{"level":2,"title":"集成husky","slug":"集成husky"},{"level":2,"title":"编写组件库文档项目","slug":"编写组件库文档项目"},{"level":2,"title":"编写组件库测试项目","slug":"编写组件库测试项目"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"docs/jsAdvanced/jiangVui.md","lastUpdated":1639657876205.9363}';var u={};const a=e('<blockquote><p>在我们平时开发中，我们都会用到组件库，比如vant、element、ant-design等，那我们是否有想过这个东西是怎么做出来的，自己能否也整一个。这篇文章将带大家详细的介绍组件库的开发，这里以vue3组件为例，建议跟着文章内容自己实现一遍。如果觉得文章太长不想现在看，不如先收藏起来，以后想弄的时候再整，作为前端开发，我认为组件库的封装还是非常有必要掌握的~嘿嘿</p></blockquote><p>其实总结起来就是使用rollup打包组件，使用rulp打包样式，引入jest自动化测试，然后引入eslint，husky这些规范等，最后发布使用。其实任何框架的组件库封装都是一个道理，这里其实也不仅限于vue3，改改也可以成为其它框架的组件库的。想了解vue3封装组件形式的可以参考我另一篇文章<a href="https://juejin.cn/post/7000032012488671269" target="_blank" rel="noopener noreferrer">vue3如何封装一个在js中也能使用的全局组件？vue3的三种组件封装形式（导入式组件、全局组件、函数式组件）</a></p><h2 id="初始化项目"><a class="header-anchor" href="#初始化项目" aria-hidden="true">#</a> 初始化项目</h2><p>创建文件夹jiang-vui，初始化</p><div class="language-"><pre><code>npm init -y\n</code></pre></div><p>.gitignore</p><div class="language-"><pre><code>node_modules\nlib\nplay/node_modules\ndocs/node_modules\n</code></pre></div><p>.npmignore</p><div class="language-"><pre><code>只需要保留lib目录以及package.json即可\n\npackages/\nnode_modules/    \nscripts/        \ndocs/            \nplay/            \nscripts/         \n.babelrc         \n.eslintignore    \n.eslintrc.js     \n.gitignore       \n.npmignore       \n.prettierrc.js   \njest.config.js   \nrollup.config.js \nyarn.lock        \ntest.html        \ngulpfile.js      \nREADME.md\n</code></pre></div><p>package.json</p><div class="language-"><pre><code>{\n  &quot;name&quot;: &quot;jiang-vui&quot;,\n  &quot;version&quot;: &quot;0.0.0&quot;,\n  &quot;description&quot;: &quot;jiangUI组件库&quot;,\n  &quot;main&quot;: &quot;lib/jiang-ui.esm-browser.prod.js&quot;,  //入口\n  &quot;author&quot;: &quot;shaonian&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;private&quot;: false\n  ...\n}\n</code></pre></div><h2 id="编写组件"><a class="header-anchor" href="#编写组件" aria-hidden="true">#</a> 编写组件</h2><p>创建一个文件夹packages，该文件夹用于组件以及样式的编写，还有jest测试，每一个组件都是一个文件夹，组件文件夹下有src/xxx.vue，以及index.js用于注册组件，test用于jest测试(测试可以没有，我也不是很熟这玩意)</p><p>目录结构：<br><a data-fancybox title="image.png" href="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/48a40c3b01c441f48e37ce705912ad4a~tplv-k3u1fbpfcp-watermark.image"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/48a40c3b01c441f48e37ce705912ad4a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></a></p><p>依赖</p><div class="language-"><pre><code>选择vue版本的时候，要注意组件封装的方式，比如说defineEmits是不适用3.0版本的，我这里选的是3.1.4版本\n\nyarn add vue@3.1.4    \nyarn add @vue/compiler-sfc@3.1.4 -D\n</code></pre></div><p>我们以button组件为例:</p><p>/packages/compoents/button/src/Button.vue</p><div class="language-"><pre><code>&lt;template&gt;\n  &lt;div class=&quot;main-container&quot;&gt;\n    &lt;button class=&quot;button-container&quot; @click=&quot;clickBack&quot;&gt;{{ text }}&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nconst emit = defineEmits([&#39;submitCallback&#39;])\n\nconst props = defineProps({\n  text: { type: String, default: &#39;提交&#39; },\n})\n\nconst clickBack = () =&gt; {\n  console.log(&#39;点击提交&#39;)\n  emit(&#39;submitCallback&#39;)\n}\n&lt;/script&gt;\n\n&lt;style lang=&quot;scss&quot; scoped&gt;\n.main-container {\n  .button-container {\n    padding: 8px 15px;\n\n    background-color: #36c96d;\n    border-width: 0px;\n    border-radius: 2px;\n    box-shadow: none;\n\n    font-size: 14px;\n    color: #fff;\n\n    cursor: pointer;\n  }\n}\n&lt;/style&gt;\n</code></pre></div><p>/packages/compoents/button/index.js 注册并导出组件</p><div class="language-"><pre><code>import MyButton from &quot;./src/Button.vue&quot;;\nMyButton.install = (app) =&gt; app.component(&quot;MyButton&quot;, MyButton);\nexport default MyButton;\n</code></pre></div><p>/packages/compoents/index.js 将所有的组件install并导出</p><div class="language-"><pre><code>import MyButton from &quot;./button/index&quot;\nimport { version } from &quot;../../package.json&quot;;\n\nconst components = [MyButton];\n\nconst install = (app, opts = {}) =&gt; {\n    app.use(setupGlobalOptions(opts));\n    components.forEach((component) =&gt; {\n        app.use(component);\n    });\n};\n\nconst setupGlobalOptions = (opts = {}) =&gt; {\n    return (app) =&gt; {\n        app.config.globalProperties.$JIANG = {\n            size: opts.size || &quot;&quot;,\n            zIndex: opts.zIndex || 2000,\n        };\n    };\n};\n\nconst Jiang = {\n    version,\n    install,\n};\n\nexport { MyButton, install };\nexport default Jiang;\n</code></pre></div><h2 id="集成vtu"><a class="header-anchor" href="#集成vtu" aria-hidden="true">#</a> 集成VTU</h2><p>安装依赖</p><div class="language-"><pre><code>yarn add jest -D\n# 此版本这个⽀持Vue3.0\nyarn add vue-jest@5.0.0-alpha.5 -D\nyarn add babel-jest -D\nyarn add @vue/test-utils@next -D\nyarn add typescript -D\n</code></pre></div><p>/jest.config.js</p><div class="language-"><pre><code>module.exports = {\n  testEnvironment: &quot;jsdom&quot;, // 默认JSdom\n  roots: [&quot;&lt;rootDir&gt;/packages&quot;], //\n  transform: {\n    &quot;^.+\\\\.vue$&quot;: &quot;vue-jest&quot;, // vue单⽂件\n    &quot;^.+\\\\js$&quot;: &quot;babel-jest&quot;, // esm最新语法 import\n  },\n  moduleFileExtensions: [&quot;vue&quot;, &quot;js&quot;, &quot;json&quot;, &quot;jsx&quot;, &quot;ts&quot;, &quot;tsx&quot;, &quot;node&quot;],\n  testMatch: [&quot;**/__tests__/**/*.spec.js&quot;],\n  // 别名\n  moduleNameMapper: {\n    &quot;^jiang-ui(.*)$&quot;: &quot;&lt;rootDir&gt;$1&quot;,\n  },\n};\n</code></pre></div><p>/packages/button/<strong>tests</strong>/Button.spec.js</p><div class="language-"><pre><code>此处是借鉴的，，测试用例懂的可以自己写，本人对这个还不是很会\n\nimport Button from &quot;../Button.vue&quot;;\nimport { mount } from &quot;@vue/test-utils&quot;;\nit(&quot;content&quot;, () =&gt; {\n    const Comp = {\n        template: `&lt;div&gt;&lt;Button&gt;默认按钮&lt;/Button&gt;&lt;/div&gt;`,\n    };\n    const wrapper = mount(Comp, {\n        global: {\n            components: {\n                Button,\n            },\n        },\n    });\n    expect(wrapper.findComponent({ name: &quot;ElButton&quot; }).text()).toContain(\n        &quot;默认按钮&quot;\n    );\n});\n</code></pre></div><p>/package.json</p><div class="language-"><pre><code>&quot;test&quot;: &quot;jest --runInBand&quot;, # 序列化执⾏   可以自己执行试试\n</code></pre></div><h2 id="集成babel跟rollup"><a class="header-anchor" href="#集成babel跟rollup" aria-hidden="true">#</a> 集成babel跟rollup</h2><p>为了打包组件，我们需要集成babel跟rollup</p><div class="language-"><pre><code>yarn add babel -D\nyarn add babel-plugin-syntax-dynamic-import -D\nyarn add babel-plugin-syntax-jsx -D\nyarn add babel-preset-env -D\nyarn add @babel/plugin-proposal-optional-chaining -D\nyarn add @babel/preset-env -D\nyarn add @vue/babel-plugin-jsx -D\n\nyarn add rollup -D\nyarn add rollup-plugin-peer-deps-external -D\nyarn add rollup-plugin-scss -D\nyarn add rollup-plugin-terser -D\nyarn add rollup-plugin-vue -D\nyarn add @rollup/plugin-node-resolve -D\nyarn add @rollup/plugin-commonjs -D\nyarn add @rollup/plugin-json -D\nyarn add @rollup/plugin-replace -D\nyarn add @rollup/plugin-babel -D\nyarn add rollup-plugin-vue -D\n</code></pre></div><p>/.babelrc</p><div class="language-"><pre><code>{\n  &quot;presets&quot;: [[&quot;@babel/preset-env&quot;, { &quot;targets&quot;: { &quot;node&quot;: &quot;current&quot; } }]],\n  &quot;plugins&quot;: [\n    &quot;syntax-dynamic-import&quot;,\n    [&quot;@vue/babel-plugin-jsx&quot;],\n    &quot;@babel/plugin-proposal-optional-chaining&quot;,\n    &quot;@babel/plugin-proposal-nullish-coalescing-operator&quot;\n  ],\n  &quot;env&quot;: {\n    &quot;utils&quot;: {\n      &quot;presets&quot;: [\n        [\n          &quot;env&quot;,\n          {\n            &quot;loose&quot;: true,\n            &quot;modules&quot;: &quot;commonjs&quot;,\n            &quot;targets&quot;: {\n              &quot;browsers&quot;: [&quot;&gt; 1%&quot;, &quot;last 2 versions&quot;, &quot;not ie &lt;= 8&quot;]\n            }\n          }\n        ]\n      ],\n      &quot;plugins&quot;: [\n        [\n          &quot;module-resolver&quot;,\n          {\n            &quot;root&quot;: [&quot;jiang-ui&quot;],\n            &quot;alias&quot;: {\n              &quot;jiang-ui/src&quot;: &quot;jiang-ui/lib&quot;\n            }\n          }\n        ]\n      ]\n    },\n    &quot;test&quot;: {\n      &quot;plugins&quot;: [&quot;istanbul&quot;],\n      &quot;presets&quot;: [[&quot;env&quot;, { &quot;targets&quot;: { &quot;node&quot;: &quot;current&quot; } }]]\n    },\n    &quot;esm&quot;: {\n      &quot;presets&quot;: [[&quot;@babel/preset-env&quot;, { &quot;modules&quot;: false }]]\n    }\n  }\n}\n</code></pre></div><h2 id="使用rollup打包组件"><a class="header-anchor" href="#使用rollup打包组件" aria-hidden="true">#</a> 使用rollup打包组件</h2><p>/rollup.config.js 配置打包信息</p><div class="language-"><pre><code>import pkg from &#39;./package.json&#39;\nimport vuePlugin from &#39;rollup-plugin-vue&#39;\nimport scss from &#39;rollup-plugin-scss&#39;\nimport peerDepsExternal from &#39;rollup-plugin-peer-deps-external&#39;\nimport resolve from &#39;@rollup/plugin-node-resolve&#39;\nimport commonjs from &#39;@rollup/plugin-commonjs&#39;\nimport json from &#39;@rollup/plugin-json&#39;\nimport replace from &#39;@rollup/plugin-replace&#39;\nimport babel from &#39;@rollup/plugin-babel&#39;\nimport { terser } from &#39;rollup-plugin-terser&#39;\nconst name = &#39;Jiang&#39;\nconst createBanner = () =&gt; {\n  return `/*!\n  * ${pkg.name} v${pkg.version}\n  * (c) ${new Date().getFullYear()} kkb\n  * @license MIT\n  */`\n}\nconst createBaseConfig = () =&gt; {\n  return {\n    input: &quot;packages/compoents/index.js&quot;,\n    external: [&#39;vue&#39;],\n    plugins: [\n      vuePlugin({\n        css: true\n      }),\n      peerDepsExternal(),\n      babel(),\n      resolve({\n        extensions: [&#39;.vue&#39;, &#39;.jsx&#39;]\n      }),\n      commonjs(),\n      json(),\n      scss()\n    ],\n    output: {\n      sourcemap: false,\n      banner: createBanner(),\n      externalLiveBindings: false,\n      globals: {\n        vue: &#39;Vue&#39;\n      }\n    }\n  }\n}\nfunction mergeConfig(baseConfig, configB) {\n  const config = Object.assign({}, baseConfig)\n  // plugin\n  if (configB.plugins) {\n    baseConfig.plugins.push(...configB.plugins)\n  }\n  // output\n  config.output = Object.assign({}, baseConfig.output, configB.output)\n  return config\n} function createFileName(formatName) {\n  return `lib/jiang-ui.${formatName}.js`\n}\n//上面这个是设置打包后的输出目录\n// es-bundle\nconst esBundleConfig = {\n  plugins: [\n    replace({\n      __DEV__: `(process.env.NODE_ENV !== &#39;production&#39;)`\n    })\n  ],\n  output: {\n    file: createFileName(&#39;esm-bundler&#39;),\n    format: &#39;es&#39;\n  }\n}\n// es-browser\nconst esBrowserConfig = {\n  plugins: [\n    replace({\n      __DEV__: true\n    })\n  ],\n  output: {\n    file: createFileName(&#39;esm-browser&#39;),\n    format: &#39;es&#39;\n  }\n}\n// es-browser.prod\nconst esBrowserProdConfig = {\n  plugins: [\n    terser(),\n    replace({\n      __DEV__: false\n    })\n  ],\n  output: {\n    file: createFileName(&#39;esm-browser.prod&#39;),\n    format: &#39;es&#39;\n  }\n}\n// cjs\nconst cjsConfig = {\n  plugins: [\n    replace({\n      __DEV__: true\n    })\n  ],\n  output: {\n    file: createFileName(&#39;cjs&#39;),\n    format: &#39;cjs&#39;\n  }\n}\n// cjs.prod\nconst cjsProdConfig = {\n  plugins: [\n    terser(),\n    replace({\n      __DEV__: false\n    })\n  ],\n  output: {\n    file: createFileName(&#39;cjs.prod&#39;),\n    format: &#39;cjs&#39;\n  }\n}\n// global\nconst globalConfig = {\n  plugins: [\n    replace({\n      __DEV__: true,\n      &#39;process.env.NODE_ENV&#39;: true\n    })\n  ],\n  output: {\n    file: createFileName(&#39;global&#39;),\n    format: &#39;iife&#39;,\n    name\n  }\n}\n// global.prod\nconst globalProdConfig = {\n  plugins: [\n    terser(),\n    replace({\n      __DEV__: false\n    })\n  ],\n  output: {\n    file: createFileName(&#39;global.prod&#39;),\n    format: &#39;iife&#39;,\n    name\n  }\n}\n// const formatConfigs = [\n//   esBundleConfig,\n//   esBrowserProdConfig,\n//   esBrowserConfig,\n//   cjsConfig,\n//   cjsProdConfig,\n//   globalConfig,\n//   globalProdConfig\n// ]\n\nconst formatConfigs = [\n  globalConfig,\n  esBrowserProdConfig\n]\nfunction createPackageConfigs() {\n  return formatConfigs.map((formatConfig) =&gt; {\n    return mergeConfig(createBaseConfig(), formatConfig)\n  })\n}\nexport default createPackageConfigs()\n</code></pre></div><p>/package.json</p><div class="language-"><pre><code>&quot;build&quot;: &quot;rollup -c&quot;\n</code></pre></div><p>这个时候我们已经可以打包组件库啦！！！ 执行命令后，自动在根目录下生成文件夹lib,并且已经有我们的组件代码了。</p><p><a data-fancybox title="image.png" href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/daaa605fbb3b4ab7889aa3d62ce69267~tplv-k3u1fbpfcp-watermark.image"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/daaa605fbb3b4ab7889aa3d62ce69267~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></a></p><h2 id="测试组件"><a class="header-anchor" href="#测试组件" aria-hidden="true">#</a> 测试组件</h2><p>我们编写一个test.html来检查一下我们的组件是否能行吧</p><p>/test.html</p><div class="language-"><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;\n    &lt;title&gt;组件测试界面&lt;/title&gt;\n    &lt;script src=&quot;https://unpkg.com/vue@next&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;lib/jiang-ui.global.prod.js&quot;&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n    &lt;script&gt;\n      const { createApp } = Vue\n      const MyComponent = {\n        template: `\n          &lt;my-button /&gt;\n        `,\n      }\n      createApp(MyComponent).use(Jiang).mount(&#39;#app&#39;)\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre></div><p>运行结果：<br><a data-fancybox title="image.png" href="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7689c5fac60b46ad9c30a5a0b42293b0~tplv-k3u1fbpfcp-watermark.image"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7689c5fac60b46ad9c30a5a0b42293b0~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></a></p><p>因为没有引入样式，所以没有样式效果哦。那么接下来我们来打包样式！</p><h2 id="集成gulp"><a class="header-anchor" href="#集成gulp" aria-hidden="true">#</a> 集成gulp</h2><div class="language-"><pre><code>yarn add gulp -D \nyarn add gulp-autoprefixer -D \nyarn add gulp-sass -D \nyarn add gulp-cssmin -D \nyarn add cp-cli -D \nyarn add tslib -D \n\n添加sass\nyarn add sass -D\nyarn add sass-loader -D\n</code></pre></div><h2 id="打包样式"><a class="header-anchor" href="#打包样式" aria-hidden="true">#</a> 打包样式</h2><p>/gulpfile.js</p><div class="language-"><pre><code>const { series, src, dest } = require(&quot;gulp&quot;);\nconst sass = require(&quot;gulp-sass&quot;);\nconst autoprefixer = require(&quot;gulp-autoprefixer&quot;);\nconst cssmin = require(&quot;gulp-cssmin&quot;);\n\nfunction compile() {\n  return src(&quot;./packages/styles/*.scss&quot;)\n    .pipe(sass.sync())\n    .pipe(\n      autoprefixer({\n        browsers: [&quot;ie &gt; 9&quot;, &quot;last 2 versions&quot;],\n        cascade: false,\n      })\n    )\n    .pipe(cssmin())\n    .pipe(dest(&quot;./lib/styles&quot;));\n}\n\nfunction copyfont() {\n  return src(&quot;./packages/fonts/**&quot;).pipe(cssmin()).pipe(dest(&quot;./lib/fonts&quot;));\n}\n\nexports.build = series(compile, copyfont);\n</code></pre></div><p>这个时候我们回到/packages/styles,在这里写的样式，我们将进行打包输出，其实还有fonts，在这里不做演示</p><p>/packages/styles/compoents/Button.sass</p><div class="language-"><pre><code>.main-container {\n  .button-container {\n    padding: 8px 15px;\n\n    background-color: #36c96d;\n    border-width: 0px;\n    border-radius: 2px;\n    box-shadow: none;\n\n    font-size: 14px;\n    color: #fff;\n\n    cursor: pointer;\n  }\n}\n</code></pre></div><p>pagckage.json</p><div class="language-"><pre><code>&quot;build:theme&quot;: &quot;gulp build --gulpfile gulpfile.js&quot;\n</code></pre></div><p>执行命令后我们在lib目录可以看到：</p><p><a data-fancybox title="image.png" href="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9fc3f74bef9d4cfcbecf35d494fa3c26~tplv-k3u1fbpfcp-watermark.image"><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9fc3f74bef9d4cfcbecf35d494fa3c26~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></a></p><h2 id="发布组件库"><a class="header-anchor" href="#发布组件库" aria-hidden="true">#</a> 发布组件库</h2><p>/scripts/publish.sh</p><div class="language-"><pre><code>#!/usr/bin/env bash\nnpm config get registry # 检查仓库镜像库\nnpm config set registry=http://registry.npmjs.org\necho &#39;请进行登录相关操作：&#39;\nnpm login # 登陆\necho &quot;-------publishing-------&quot;\nnpm publish # 发布\nnpm config set registry=https://registry.npm.taobao.org # 设置为淘宝镜像\necho &quot;发布完成&quot;\nexit\n</code></pre></div><p>package.json</p><div class="language-"><pre><code>&quot;pub&quot;: &quot;sh ./scripts/publish.sh&quot;\n</code></pre></div><p>当然你也可以手动操作发布流程，因为登录过一次之后，之后是不需要重新登录的，可以直接npm publish, 每次发布之前记得改下版本号，以及build &amp;&amp; build:theme打包一哈</p><h2 id="在真实环境下使用"><a class="header-anchor" href="#在真实环境下使用" aria-hidden="true">#</a> 在真实环境下使用</h2><p>现在我们在vue3项目引入使用试试吧</p><div class="language-"><pre><code>yarn add jiang-vui\n</code></pre></div><p>在main.ts中导入样式，或者在vue文件中导入也行</p><div class="language-"><pre><code>import  &quot;jiang-vui/lib/styles/index.css&quot;;\n</code></pre></div><p>在页面中使用</p><div class="language-"><pre><code> &lt;my-button @submitCallback=&quot;submitCallback&quot;&gt;&lt;/my-button&gt;\n \n import { MyButton } from &quot;jiang-vui&quot;;\n const submitCallback = ()=&gt;{\n  console.log(&quot;组件库点击回调&quot;);\n}\n</code></pre></div><p>成功使用，并且样式，交互都没毛病，good!<br><a data-fancybox title="image.png" href="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/723064023eea426cb0d42a95f48dc794~tplv-k3u1fbpfcp-watermark.image"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/723064023eea426cb0d42a95f48dc794~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></a></p><p>到此为止，其实最基础的组件库架子已经算是差不多做完了，后面会继续进行优化，添加组件！</p><h2 id="集成eslint"><a class="header-anchor" href="#集成eslint" aria-hidden="true">#</a> 集成eslint</h2><div class="language-"><pre><code>yarn add eslint -D\nyarn add eslint-formatter-pretty -D\nyarn add eslint-plugin-json -D\nyarn add eslint-plugin-prettier -D\nyarn add eslint-plugin-vue -D\nyarn add @vue/eslint-config-prettier -D\nyarn add babel-eslint -D\nyarn add prettier -D\n</code></pre></div><p>/.eslintrc.js</p><div class="language-"><pre><code>module.exports = {\n  &quot;endOfLine&quot;:&quot;auto&quot;,\n  root: true,\n  env: {\n    browser: true,\n    es2020: true,\n    node: true,\n    jest: true,\n  },\n  globals: {\n    ga: true,\n    chrome: true,\n    __DEV__: true,\n  },\n  extends: [\n    &quot;plugin:json/recommended&quot;,\n    &quot;plugin:vue/vue3-essential&quot;,\n    &quot;eslint:recommended&quot;,\n    &quot;@vue/prettier&quot;,\n  ],\n  parserOptions: {\n    parser: &quot;babel-eslint&quot;,\n  },\n  rules: {\n    &quot;no-console&quot;: process.env.NODE_ENV === &quot;production&quot; ? &quot;warn&quot; : &quot;off&quot;,\n    &quot;no-debugger&quot;: process.env.NODE_ENV === &quot;production&quot; ? &quot;warn&quot; : &quot;off&quot;,\n    &quot;prettier/prettier&quot;: &quot;error&quot;,\n  },\n};\n</code></pre></div><p>/.eslintignore</p><div class="language-"><pre><code>src/utils/popper.js\nsrc/utils/date.js\nexamples/play\n*.sh\nnode_modules\nlib\ncoverage\n*.md\n*.scss\n*.woff\n*.ttf\nsrc/index.js\ndist\n</code></pre></div><p>/.prettierrc.js</p><div class="language-"><pre><code>module.exports = {\n  semi: false,\n  trailingComma: &#39;all&#39;,\n  singleQuote: true,\n  printWidth: 80,\n  tabWidth: 2,\n  endOfLine: &#39;auto&#39;,\n  overrides: [\n    {\n      files: &#39;*.scss&#39;,\n      options: {\n        parser: &#39;scss&#39;,\n      },\n    },\n  ],\n}\n</code></pre></div><p>/package.json</p><div class="language-"><pre><code>&quot;lint&quot;: &quot;eslint --no-error-on-unmatched-pattern --ext .vue --ext .js --ext .jsx packages/**/ src/**/ --fix&quot;,\n</code></pre></div><h2 id="集成husky"><a class="header-anchor" href="#集成husky" aria-hidden="true">#</a> 集成husky</h2><p>/package.json</p><div class="language-"><pre><code>添加命令\n&quot;prepare&quot;: &quot;husky install&quot;,\n&quot;commitlint&quot;: &quot;commitlint --config commitlint.config.js -e -V&quot;\n\n下载依赖\nyarn add @commitlint/cli -D\nyarn add @commitlint/config-conventional -D\nyarn add husky -D\n\n添加husky\n&quot;husky&quot;: {\n    &quot;hooks&quot;: {\n      &quot;pre-commit&quot;: &quot;lint-staged&quot;,\n      &quot;commit-msg&quot;: &quot;commitlint -E $HUSKY_GIT_PARAMS&quot;\n    }\n}\n</code></pre></div><p>执行yarn add husky 因为添加了prepare，所以会自动生成husky文件夹</p><p>添加pre-commit钩子</p><div class="language-"><pre><code>npx husky add .husky/pre-commit &quot;npm run test&quot;\n\n并在pre-commit中写入邮箱的限制代码\n#!/bin/sh\n. &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot;\n\nEMAIL=$(git config user.email)\nif [[ ! $EMAIL =~ ^[.[:alnum:]]+@qq\\.com$ ]];\nthen\n  echo &quot;Your git information is not valid&quot;;\n  echo &quot;Please run:&quot;\n  echo &#39;   git config --local user.name &quot;&lt;Your name in qq&gt;&quot;&#39;\n  echo &#39;   git config --local user.email &quot;&lt;Your alias&gt;@qq.com&quot;&#39;\n  exit 1;\nfi;\n</code></pre></div><p>添加commit-msg钩子</p><div class="language-"><pre><code>npx husky add .husky/commit-msg &#39;npx --no-install commitlint --edit &quot;$1&quot;&#39;\n\n并在commit-msg写入commit代码时的规范限制\n#!/bin/sh\n. &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot;\n\nnpm run commitlint\n</code></pre></div><p>commitlint.config.js</p><div class="language-"><pre><code>module.exports = {\n  extends: [&#39;@commitlint/config-conventional&#39;],\n  // 检测规则\n  rules: {\n    &#39;type-enum&#39;: [\n      2,\n      &#39;always&#39;,\n      [\n        &#39;feat&#39;,\n        &#39;fix&#39;,\n        &#39;docs&#39;,\n        &#39;style&#39;,\n        &#39;refactor&#39;,\n        &#39;perf&#39;,\n        &#39;test&#39;,\n        &#39;chore&#39;,\n        &#39;revert&#39;,\n        &#39;build&#39;\n      ]\n    ],\n    &#39;type-case&#39;: [0],\n    &#39;type-empty&#39;: [0],\n    &#39;scope-empty&#39;: [0],\n    &#39;scope-case&#39;: [0],\n    &#39;subject-full-stop&#39;: [0, &#39;never&#39;],\n    &#39;subject-case&#39;: [0, &#39;never&#39;],\n    &#39;header-max-length&#39;: [0, &#39;always&#39;, 72]\n  }\n}\n</code></pre></div><p>这样在提交代码的时候，commit信息就必须遵循规范才能够提交，提交邮箱也是有限制的。</p><h2 id="编写组件库文档项目"><a class="header-anchor" href="#编写组件库文档项目" aria-hidden="true">#</a> 编写组件库文档项目</h2><blockquote><p>我们组件库是有了，但是也得有个文档吧，这里重点是使用markdown编写我们的文档项目。在根目录下新建docs文件夹</p></blockquote><p><a data-fancybox title="image.png" href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7da58f3a53334c6f8df6feb87f68b5f4~tplv-k3u1fbpfcp-watermark.image"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7da58f3a53334c6f8df6feb87f68b5f4~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></a></p><p>/package.json</p><div class="language-"><pre><code>{\n    &quot;name&quot;: &quot;@jiang/docs&quot;,\n    &quot;version&quot;: &quot;0.0.1&quot;,\n    &quot;private&quot;: true,\n    &quot;scripts&quot;: {\n        &quot;dev&quot;: &quot;vite&quot;,\n        &quot;build&quot;: &quot;vite build&quot;\n    },\n    &quot;dependencies&quot;: {\n        &quot;vue&quot;: &quot;^3.2.8&quot;,\n        &quot;vue-router&quot;: &quot;4&quot;\n    },\n    &quot;devDependencies&quot;: {\n        &quot;@vitejs/plugin-vue&quot;: &quot;^1.6.0&quot;,\n        &quot;node-sass&quot;: &quot;^6.0.1&quot;,\n        &quot;sass&quot;: &quot;^1.39.0&quot;,\n        &quot;sass-loader&quot;: &quot;^12.1.0&quot;,\n        &quot;vite&quot;: &quot;^2.5.3&quot;,\n        &quot;vite-plugin-vuedoc&quot;: &quot;^3.1.3&quot;,\n        &quot;@vue/compiler-sfc&quot;: &quot;^3.0.5&quot;\n    }\n}\n</code></pre></div><p>/shims.d.ts</p><div class="language-"><pre><code>declare module &#39;*.vue&#39; {\n    import type { DefineComponent } from &#39;vue&#39;\n    const component: DefineComponent&lt;{}, {}, any&gt;\n    export default component\n  }\n  \n  declare module &#39;*.md&#39; {\n    import { DefineComponent } from &#39;vue&#39;\n    const component: DefineComponent&lt;{}, {}, any&gt;\n    export default component\n  }\n</code></pre></div><p>/tsconfig.json</p><div class="language-"><pre><code>{\n    &quot;compilerOptions&quot;: {\n      &quot;target&quot;: &quot;esnext&quot;,\n      &quot;module&quot;: &quot;esnext&quot;,\n      &quot;moduleResolution&quot;: &quot;node&quot;,\n      &quot;strict&quot;: true,\n      &quot;jsx&quot;: &quot;preserve&quot;,\n      &quot;sourceMap&quot;: true,\n      &quot;lib&quot;: [&quot;esnext&quot;, &quot;dom&quot;],\n      &quot;types&quot;: [&quot;vite/client&quot;],\n      &quot;baseUrl&quot;: &quot;.&quot;\n    },\n    &quot;include&quot;: [&quot;./shims.d.ts&quot;, &quot;src/**/*&quot;],\n    &quot;exclude&quot;: [&quot;node_modules&quot;, &quot;dist&quot;]\n}\n</code></pre></div><p>/index.html</p><div class="language-"><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;link rel=&quot;icon&quot; href=&quot;/jiang.png&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n    &lt;title&gt;组件库文档&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n    &lt;script type=&quot;module&quot; src=&quot;/src/main.ts&quot;&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre></div><p>/scripts/vitePluginSyncmd.ts</p><div class="language-"><pre><code>import { Plugin } from &quot;vite&quot;;\nimport chokidar from &quot;chokidar&quot;;\nimport path from &quot;path&quot;;\nimport fs from &quot;fs-extra&quot;;\n\nfunction docFileName(path: string) {\n  const ret = path.split(&quot;/__docs__/&quot;);\n  if (ret.length === 2) {\n    return ret;\n  }\n  return [null, null];\n}\n\nfunction syncdocServer({ root }) {\n  const componentsDir = path.join(root, &quot;../src/components&quot;);\n  const docsPath = (file) =&gt; path.join(root, &quot;src/__docs__&quot;, file);\n  const watcher = chokidar.watch(`${componentsDir}/**/__docs__/*.md`);\n  watcher\n    .on(&quot;add&quot;, async (path) =&gt; {\n      const [, file] = docFileName(path);\n      if (file) {\n        try {\n          await fs.copy(path, docsPath(file));\n        } catch (err) {\n          console.error(err);\n        }\n      }\n    })\n    .on(&quot;change&quot;, async (path) =&gt; {\n      const [, file] = docFileName(path);\n      if (file) {\n        try {\n          await fs.copy(path, docsPath(file));\n        } catch (err) {\n          console.error(err);\n        }\n      }\n    })\n    .on(&quot;unlink&quot;, async (path) =&gt; {\n      const [, file] = docFileName(path);\n      if (file) {\n        try {\n          await fs.remove(docsPath(file));\n        } catch (err) {\n          console.error(err);\n        }\n      }\n    });\n}\n\nfunction vitePluginSyncmd(): Plugin {\n  return {\n    name: &quot;Syncmd&quot;,\n    configureServer(server) {\n      syncdocServer({ root: server.config.root });\n    },\n  };\n}\n\nexport default vitePluginSyncmd;\n</code></pre></div><p>/src/main.ts</p><div class="language-"><pre><code>import &#39;vite-plugin-vuedoc/style.css&#39;;\nimport { createApp } from &#39;vue&#39;;\n\nimport { router } from &#39;./router&#39;;\nimport App from &#39;./App.vue&#39;;\n\nconst app = createApp(App);\n\napp.use(router);\napp.mount(&#39;#app&#39;);\n</code></pre></div><p>/src/router.ts</p><div class="language-"><pre><code>import { createRouter, createWebHistory, RouteRecordRaw } from &#39;vue-router&#39;\nimport AppLayout from &#39;./components/AppLayout.vue&#39;\nimport menus from &#39;./menus&#39;\n\nexport const router = createRouter({\n  history: createWebHistory(),\n  strict: true,\n  routes: [\n    {\n      path: &#39;/&#39;,\n      name: &#39;Layout&#39;,\n      component: AppLayout,\n      redirect: &#39;/button&#39;,\n      children: menus.reduce((prev, item) =&gt; {\n        const _routes = item.items.map((i) =&gt; {\n          console.log(i.component)\n          return {\n            path: `/${i.name.toLowerCase()}`,\n            name: i.name,\n            component: i.component,\n          }\n        })\n        prev.push(..._routes)\n        return prev\n      }, [] as RouteRecordRaw[]),\n    },\n  ],\n})\n</code></pre></div><p>/src/menus.ts</p><div class="language-"><pre><code>import { Component } from &#39;vue&#39;\nimport Button from &#39;./__docs__/Button.md&#39;\n\ntype MenuItemType = {\n  name: string\n  component: (() =&gt; Promise&lt;Component&gt;) | Component\n}\ntype MenuType = {\n  title: string\n  items: MenuItemType[]\n}\n\nexport default [\n  {\n    title: &#39;Basic&#39;,\n    items: [\n      { name: &#39;Button&#39;, component: Button },\n    ]\n  }\n] as MenuType[]\n</code></pre></div><p>/src/App.vue</p><div class="language-"><pre><code>&lt;template&gt;\n  &lt;router-view /&gt;\n&lt;/template&gt;\n\n&lt;script lang=&quot;ts&quot;&gt;\nimport { defineComponent } from &#39;vue&#39;\n\nexport default defineComponent({\n  name: &#39;App&#39;,\n  components: {}\n})\n&lt;/script&gt;\n</code></pre></div><p>/src/compoents/AppLayout.vue</p><div class="language-"><pre><code>&lt;template&gt;\n  &lt;div class=&quot;demo-layout&quot;&gt;\n    &lt;div&gt;\n      &lt;div class=&quot;demo-header&quot;&gt;\n        &lt;div class=&quot;layout-center&quot;&gt;\n          &lt;div align=&quot;middle&quot;&gt;\n            &lt;div :flex=&quot;1&quot;&gt;\n              &lt;!-- &lt;Logo /&gt; --&gt;\n            &lt;/div&gt;\n            &lt;div&gt;\n              &lt;div mode=&quot;vertical&quot;&gt;\n                &lt;div&gt;\n                  &lt;a href=&quot;https://github.com/upJiang&quot; target=&quot;__blank&quot;&gt;GitHub&lt;/a&gt;\n                &lt;/div&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;div class=&quot;layout-center&quot;&gt;\n          &lt;div align=&quot;top&quot; :wrap=&quot;false&quot;&gt;\n            &lt;div :flex=&quot;&#39;200px&#39;&quot;&gt;\n              &lt;div style=&quot;padding-top: 40px&quot;&gt;\n                &lt;div mode=&quot;vertical&quot; :current-path=&quot;route.path&quot;&gt;\n                  &lt;template v-for=&quot;menu in menus&quot; :key=&quot;menu.title&quot;&gt;\n                    &lt;div :title=&quot;menu.title&quot;&gt;\n                      &lt;div v-for=&quot;item in menu.items&quot; :key=&quot;item&quot; :path=&quot;`/${item.name.toLowerCase()}`&quot;&gt;\n                        {{ `${item.name}-jiang` }}\n                      &lt;/div&gt;\n                    &lt;/div&gt;\n                  &lt;/template&gt;\n                &lt;/div&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div :flex=&quot;1&quot;&gt;\n              &lt;div class=&quot;site-content&quot;&gt;\n                &lt;router-view /&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n&lt;script lang=&quot;ts&quot;&gt;\nimport { defineComponent, reactive } from &#39;vue&#39;\nimport { useRoute } from &#39;vue-router&#39;\nimport menus from &#39;../menus&#39;\n\nexport default defineComponent({\n  name: &#39;AppLayout&#39;,\n  setup() {\n    const route = useRoute()\n    const data = reactive({\n\n    })\n\n    return {\n      route,\n      menus,\n      data,\n    }\n  },\n})\n&lt;/script&gt;\n&lt;style lang=&quot;scss&quot;&gt;\n.demo-layout {\n  height: 100vh;\n}\n.layout-center {\n  max-width: 1200px;\n  width: 100vw;\n  margin: 0 auto;\n}\n.site-content {\n  width: 100%;\n  padding: 20px;\n  // max-width: 900px;\n  margin: 0 auto;\n}\n\n.demo-aside {\n  border-right: solid 1px #e6e6e6;\n}\n.demo-header {\n  border-bottom: solid 1px #e6e6e6;\n  // box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\n}\n&lt;/style&gt;\n</code></pre></div><p>使用markdown语法编写文档 /src/<strong>docs</strong>/Button.md</p><div class="language-"><pre><code>---\ntitle: Button\nwrapperClass: md-button\n---\n\n文档内容，可使用markdown语法~\n</code></pre></div><p>packge.json</p><div class="language-"><pre><code>&quot;docs:init&quot;: &quot;cd ./docs &amp;&amp; yarn &quot;,\n&quot;docs&quot;: &quot;cd ./docs &amp;&amp; yarn dev&quot;\n</code></pre></div><p>项目启动后就可以看到使用md编写的页面效果（项目挺常规不想赘述太多）</p><h2 id="编写组件库测试项目"><a class="header-anchor" href="#编写组件库测试项目" aria-hidden="true">#</a> 编写组件库测试项目</h2><blockquote><p>组件库编写完，其实我们直接打包之前，是可以直接引入组件路径来看看效果的，我们来加一个测试项目吧。在根目录下新增play文件夹</p></blockquote><p><a data-fancybox title="image.png" href="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89fbfc9fd80c4094bc30966c8b58896b~tplv-k3u1fbpfcp-watermark.image"><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89fbfc9fd80c4094bc30966c8b58896b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></a></p><p>项目其实就是一个vue3.0 + vite的项目，没啥好说的，只是我们在页面中使用相对路径去测试我们编写的组件</p><p>/src/views/ButtonTest.vue</p><div class="language-"><pre><code>&lt;template&gt;\n    &lt;my-button&gt;&lt;/my-button&gt;\n&lt;/template&gt;\n&lt;script lang=&quot;ts&quot; setup&gt;\nimport MyButton from &#39;../../../packages/compoents/button/src/Button.vue&#39;\n&lt;/script&gt;\n</code></pre></div><p>/package.json</p><div class="language-"><pre><code>&quot;play:init&quot;: &quot;cd ./play &amp;&amp; yarn&quot;,\n&quot;play&quot;: &quot;cd ./play &amp;&amp; yarn dev&quot;\n</code></pre></div><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>最近也是一直在学习工程化的东西，一直都想尝试做个组件库，在开课吧里看了<a href="https://juejin.cn/user/1978776660216136" target="_blank" rel="noopener noreferrer">全栈然叔</a>的工程化课程后，就动手跟着做了一遍，但是发布啥的都没介绍，样式打包也有问题。然后又借鉴了<a href="https://segmentfault.com/a/1190000039920691" target="_blank" rel="noopener noreferrer">手握手教你搭建组件库环境</a>这篇文章，中间也踩了不少坑，其实项目中有些东西我也不是很懂，如果跟着文章没做出来，那就下载一下我的项目代码对比一下。</p><p>项目以及文章我都会持续更新的，如果你都看到这里了，觉得有收获，写的还行的话，就点个赞收藏一下吧，如果你也是一个爱学习的前端，不妨点个关注！嘿嘿，谢谢！！！</p><p><a href="https://github.com/upJiang/jiangUI" target="_blank" rel="noopener noreferrer">项目代码地址</a></p>',138);u.render=function(e,o,u,r,s,i){return n(),t("div",null,[a])};export default u;export{o as __pageData};
