import{g as a,f as e,E as t}from"./common-d6bd45c0.js";const l='{"title":"环形链表基本问题——如何判断链表是否成环？","frontmatter":{},"headers":[{"level":2,"title":"环形链表基本问题——如何判断链表是否成环？","slug":"环形链表基本问题——如何判断链表是否成环？"},{"level":2,"title":"环形链表衍生问题——定位环的起点","slug":"环形链表衍生问题——定位环的起点"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"docs/algorithm/chainCicle.md","lastUpdated":1645873183861.3638}';var r={};const n=t('<h2 id="环形链表基本问题——如何判断链表是否成环？"><a class="header-anchor" href="#环形链表基本问题——如何判断链表是否成环？" aria-hidden="true">#</a> 环形链表基本问题——如何判断链表是否成环？</h2><blockquote><p>真题描述：给定一个链表，判断链表中是否有环。</p></blockquote><p>示例：<br> 输入：[3,2,0,4]（链表结构如下图） 输出：true <br> 解释：链表中存在一个环 <br><a data-fancybox title="img" href="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/29/1712658d244622c4~tplv-t2oaga2asx-watermark.awebp"><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/29/1712658d244622c4~tplv-t2oaga2asx-watermark.awebp" alt="img"></a></p><p>思路：</p><ul><li>从头开始遍历这个链表，所到之处，都定义一个 head.flag = true</li><li>如果遍历过程中遇到了 head.flag 为 true ,就说明重复了，那么就是有环</li></ul><div class="language-"><pre><code>// 入参是头结点 \nconst hasCycle = function(head) {\n    // 只要结点存在，那么就继续遍历\n    while(head){\n        // 如果 flag 已经立过了，那么说明环存在\n        if(head.flag){\n            return true;\n        }else{\n            // 如果 flag 没立过，就立一个 flag 再往下走\n            head.flag = true;\n            head = head.next;\n        }\n    }\n    return false;\n};\n</code></pre></div><h2 id="环形链表衍生问题——定位环的起点"><a class="header-anchor" href="#环形链表衍生问题——定位环的起点" aria-hidden="true">#</a> 环形链表衍生问题——定位环的起点</h2><blockquote><p>真题描述：给定一个链表，返回链表开始入环的第一个结点。 如果链表无环，则返回 null。</p></blockquote><p>示例：<br> 输入：head = [3,2,0,-4]（如下图） 输出：tail connects to node index 1 解释：链表中有一个环，其尾部连接到第二个结点。<br><a data-fancybox title="img" href="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/29/1712658d244622c4~tplv-t2oaga2asx-watermark.awebp"><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/29/1712658d244622c4~tplv-t2oaga2asx-watermark.awebp" alt="img"></a></p><p>思路就是把第一次遇到 head.flag 为 true 的节点返回即可</p><div class="language-"><pre><code>const detectCycle = function(head) {\n    while(head){\n        if(head.flag){\n            return head;\n        }else{\n            head.flag = true;\n            head = head.next;\n        }\n    }\n    return null;\n};\n</code></pre></div><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>记住连边成环的判断思路：遍历打 flag，再次遇到 flag 为 true 即成环</p>',13);r.render=function(t,l,r,s,d,o){return e(),a("div",null,[n])};export default r;export{l as __pageData};
