import{g as e,f as a,E as n}from"./common-d6bd45c0.js";const l='{"title":"自动插入分号规则","frontmatter":{},"headers":[{"level":2,"title":"自动插入分号规则","slug":"自动插入分号规则"},{"level":2,"title":"不写分号需要注意的情况","slug":"不写分号需要注意的情况"},{"level":3,"title":"以括号开头的语句","slug":"以括号开头的语句"},{"level":3,"title":"以数组开头的语句","slug":"以数组开头的语句"},{"level":3,"title":"以正则表达式开头的语句","slug":"以正则表达式开头的语句"},{"level":3,"title":"以 Template 开头的语句","slug":"以-template-开头的语句"}],"relativePath":"docs/reStudy/js_semicolon.md","lastUpdated":1636897878147.4866}';var o={};const r=n('<h2 id="自动插入分号规则"><a class="header-anchor" href="#自动插入分号规则" aria-hidden="true">#</a> 自动插入分号规则</h2><ul><li>要有换行符，且下一个符号是不符合语法的，那么就尝试插入分号。</li><li>有换行符，且语法中规定此处不能有换行符，那么就自动插入分号。</li><li>源代码结束处，不能形成完整的脚本或者模块结构，那么就自动插入分号。</li></ul><div class="language-"><pre><code>let a = 1  \nvoid function(a){\n    console.log(a);\n}(a);\n\n</code></pre></div><p>第一行插入分号，因为要有换行符，且下一个符号是不符合语法的</p><div class="language-"><pre><code>var a = 1, b = 1, c = 1;\na\n++\nb\n++\nc\n</code></pre></div><p>结果在a后面插入分号， a;++b;++c，这是因为[no LineTerminator here]规则影响的</p><div class="language-"><pre><code>(function(a){\n    console.log(a);\n})()\n(function(a){\n    console.log(a);\n})()\n</code></pre></div><p>这段代码意图上显然是形成两个 IIFE。</p><p>我们来看第三行结束的位置，JavaScript 引擎会认为函数返回的可能是个函数，那么，在后面再跟括号形成函数调用就是合理的，因此这里不会自动插入分号。这是一些鼓励不写分号的编码风格会要求大家写 IIFE 时必须在行首加分号的原因。</p><h2 id="不写分号需要注意的情况"><a class="header-anchor" href="#不写分号需要注意的情况" aria-hidden="true">#</a> 不写分号需要注意的情况</h2><h3 id="以括号开头的语句"><a class="header-anchor" href="#以括号开头的语句" aria-hidden="true">#</a> 以括号开头的语句</h3><div class="language-"><pre><code>(function(a){\n    console.log(a);\n})()/*这里没有被自动插入分号*/\n(function(a){\n    console.log(a);\n})()\n</code></pre></div><p>这段代码看似两个独立执行的函数表达式，但是其实第三组括号被理解为传参，导致抛出错误。</p><h3 id="以数组开头的语句"><a class="header-anchor" href="#以数组开头的语句" aria-hidden="true">#</a> 以数组开头的语句</h3><div class="language-"><pre><code>var a = [[]]/*这里没有被自动插入分号*/\n[3, 2, 1, 0].forEach(e =&gt; console.log(e))\n</code></pre></div><p>这段代码本意是一个变量 a 赋值，然后对一个数组执行 forEach，但是因为没有自动插入分号，被理解为下标运算符和逗号表达式，我这个例子展示的情况，甚至不会抛出错误，这对于代码排查问题是个噩梦。</p><h3 id="以正则表达式开头的语句"><a class="header-anchor" href="#以正则表达式开头的语句" aria-hidden="true">#</a> 以正则表达式开头的语句</h3><div class="language-"><pre><code>var x = 1, g = {test:()=&gt;0}, b = 1/*这里没有被自动插入分号*/\n/(a)/g.test(&quot;abc&quot;)\nconsole.log(RegExp.$1)\n</code></pre></div><p>这段代码本意是声明三个变量，然后测试一个字符串中是否含有字母 a，但是因为没有自动插入分号，正则的第一个斜杠被理解成了除号，后面的意思就都变了。</p><h3 id="以-template-开头的语句"><a class="header-anchor" href="#以-template-开头的语句" aria-hidden="true">#</a> 以 Template 开头的语句</h3><div class="language-"><pre><code>var f = function(){\n  return &quot;&quot;;\n}\nvar g = f/*这里没有被自动插入分号*/\n`Template`.match(/(a)/);\nconsole.log(RegExp.$1)\n</code></pre></div><p>这段代码本意是声明函数 f，然后赋值给 g，再测试 Template 中是否含有字母 a。但是因为没有自动插入分号，函数 f 被认为跟 Template 一体的，进而被莫名其妙地执行了一次。</p>',22);o.render=function(n,l,o,t,d,c){return a(),e("div",null,[r])};export default o;export{l as __pageData};
