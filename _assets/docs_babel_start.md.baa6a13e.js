import{g as e,f as a,E as t}from"./common-d6bd45c0.js";const r='{"title":"用途","frontmatter":{},"headers":[{"level":2,"title":"用途","slug":"用途"}],"relativePath":"docs/babel/start.md","lastUpdated":1648481083530.271}';var l={};const i=t('<blockquote><p>babel 最开始叫 6to5，顾名思义是 es6 转 es5，但是后来随着 es 标准的演进，有了 es7、es8 等， 6to5 的名字已经不合适了，所以改名为了 babel。</p></blockquote><h2 id="用途"><a class="header-anchor" href="#用途" aria-hidden="true">#</a> 用途</h2><h4 id="转译-esnext、typescript、flow-等到目标环境支持的-js"><a class="header-anchor" href="#转译-esnext、typescript、flow-等到目标环境支持的-js" aria-hidden="true">#</a> 转译 esnext、typescript、flow 等到目标环境支持的 js</h4><p>这个是最常用的功能，用来把代码中的 esnext 的新的语法、typescript 和 flow 的语法转成基于目标环境支持的语法的实现。并且还可以把目标环境不支持的 api 进行 polyfill。</p><p>babel7 支持了 preset-env，可以指定 targets 来进行按需转换，转换更加的精准，产物更小。</p><h4 id="一些特定用途的代码转换"><a class="header-anchor" href="#一些特定用途的代码转换" aria-hidden="true">#</a> 一些特定用途的代码转换</h4><p>babel 是一个转译器，暴露了很多 api，用这些 api 可以完成代码到 AST 的 parse，AST 的转换，以及目标代码的生成。</p><p>开发者可以用它来来完成一些特定用途的转换，比如函数插桩（函数中自动插入一些代码，例如埋点代码）、自动国际化、default import 转 named import 等。这些都是后面的实战案例。</p><p>现在比较流行的小程序转译工具 taro，就是基于 babel 的 api 来实现的。</p><h4 id="代码的静态分析"><a class="header-anchor" href="#代码的静态分析" aria-hidden="true">#</a> 代码的静态分析</h4><p>对代码进行 parse 之后，能够进行转换，是因为通过 AST 的结构能够理解代码。理解了代码之后，除了进行转换然后生成目标代码之外，也同样可以用于分析代码的信息，进行一些检查。</p><ul><li>linter 工具就是分析 AST 的结构，对代码规范进行检查。</li><li>api 文档自动生成工具，可以提取源码中的注释，然后生成文档。</li><li>type checker 会根据从 AST 中提取的或者推导的类型信息，对 AST 进行类型是否一致的检查，从而减少运行时因类型导致的错误。</li><li>压缩混淆工具，这个也是分析代码结构，进行删除死代码、变量名混淆、常量折叠等各种编译优化，生成体积更小、性能更优的代码。</li><li>js 解释器，除了对 AST 进行各种信息的提取和检查以外，我们还可以直接解释执行 AST。</li></ul>',12);l.render=function(t,r,l,s,p,o){return a(),e("div",null,[i])};export default l;export{r as __pageData};
