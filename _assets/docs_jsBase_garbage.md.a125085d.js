import{g as a,f as e,E as n}from"./common-d6bd45c0.js";const r='{"title":"垃圾回收策略","frontmatter":{},"headers":[{"level":2,"title":"垃圾回收策略","slug":"垃圾回收策略"},{"level":3,"title":"标记清除(较为常用)","slug":"标记清除-较为常用"},{"level":3,"title":"引用计数,到0清除","slug":"引用计数-到0清除"}],"relativePath":"docs/jsBase/garbage.md","lastUpdated":1627825388973.4358}';var t={};const o=n('<blockquote><p>垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。但是这个过程不是实时的，因为其开销比较大，所以垃圾回收器会按照固定的时间间隔周期性的执行。</p></blockquote><div class="language-"><pre><code>function fn1() {\n    var obj = {name: &#39;hanzichi&#39;, age: 10};  //使用完后将被清除\n}\nfunction fn2() {  \n    var obj = {name:&#39;hanzichi&#39;, age: 10};  //使用完后不会被清除，因为被全局变量b所指向\n   return obj;\n}\nvar a = fn1();  \nvar b = fn2();\n</code></pre></div><h2 id="垃圾回收策略"><a class="header-anchor" href="#垃圾回收策略" aria-hidden="true">#</a> 垃圾回收策略</h2><h3 id="标记清除-较为常用"><a class="header-anchor" href="#标记清除-较为常用" aria-hidden="true">#</a> 标记清除(较为常用)</h3><div class="language-"><pre><code>function test(){\nvar a = 10 ; //被标记 ，进入环境\nvar b = 20 ; //被标记 ，进入环境\n}\ntest(); //执行完毕 之后 a、b又被标离开环境，被回收。\n</code></pre></div><h3 id="引用计数-到0清除"><a class="header-anchor" href="#引用计数-到0清除" aria-hidden="true">#</a> 引用计数,到0清除</h3><div class="language-"><pre><code>function test(){\nvar a = {} ; //a的引用次数为0\nvar b = a ; //a的引用次数加1，为1\nvar c =a; //a的引用次数再加1，为2\nvar b ={}; //a的引用次数减1，为1\n}\n</code></pre></div><blockquote><p>在一些绑定了定时器或者监听器的对象，要及时清除，赋值null或者clear</p></blockquote>',8);t.render=function(n,r,t,d,l,c){return e(),a("div",null,[o])};export default t;export{r as __pageData};
