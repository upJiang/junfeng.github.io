import{g as e,f as t,E as a}from"./common-d6bd45c0.js";const n='{"title":"1. 为 github 项目添加 Actions secrets","frontmatter":{},"headers":[{"level":2,"title":"1. 为 github 项目添加 Actions secrets","slug":"_1-为-github-项目添加-actions-secrets"},{"level":3,"title":"创建 Personal access tokens","slug":"创建-personal-access-tokens"},{"level":3,"title":"给项目添加 Actions secrets","slug":"给项目添加-actions-secrets"},{"level":2,"title":"2. 添加依赖","slug":"_2-添加依赖"},{"level":2,"title":"3. 在项目中添加 .github/workflows/release.yml","slug":"_3-在项目中添加-github-workflows-release-yml"},{"level":2,"title":"4. 在项目中添加配置文件 .releaserc","slug":"_4-在项目中添加配置文件-releaserc"}],"relativePath":"docs/jsAdvanced/changelog.md","lastUpdated":1645531825339.6787}';var s={};const r=a('<p><a href="https://github.com/features/actions" target="_blank" rel="noopener noreferrer">GitHub Actions</a> 是 GitHub 的<a href="https://www.ruanyifeng.com/blog/2015/09/continuous-integration.html" target="_blank" rel="noopener noreferrer">持续集成服务</a>， <a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html" target="_blank" rel="noopener noreferrer">Github Action 入门教程</a></p><p><a href="https://github.com/semantic-release/semantic-release" target="_blank" rel="noopener noreferrer">semantic-release</a> 支持很多持续集成工具，为我们提供生成 <a href="http://changelog.md" target="_blank" rel="noopener noreferrer">changelog.md</a>、更新版本号、添加tags等功能。</p><p>semantic-release 的大致工作流程如下：</p><ul><li>提交到特定的分支触发 release 流程</li><li>验证 commit 信息，生成 release note，打 git tag</li><li>其他后续流程，如生成 <a href="http://CHANGELOG.md" target="_blank" rel="noopener noreferrer">CHANGELOG.md</a>，npm publish 等等（通过插件完成）</li></ul><p>这里将使用 GithubAction 与 semantic-release 为我们的 github 项目搭建自动集成 changelong ，打tags，更新版本号，GithubAcion 还能做更多的事情（比如发布 npm 包、build 等等），可自行查阅学习。</p><h2 id="_1-为-github-项目添加-actions-secrets"><a class="header-anchor" href="#_1-为-github-项目添加-actions-secrets" aria-hidden="true">#</a> 1. 为 github 项目添加 Actions secrets</h2><h3 id="创建-personal-access-tokens"><a class="header-anchor" href="#创建-personal-access-tokens" aria-hidden="true">#</a> 创建 Personal access tokens</h3><p>点击 github 头像 =&gt; settings =&gt; 左边 Developer settings =&gt; Personal access tokens</p><p><a data-fancybox title="image.png" href="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4bc57e8a2d0743e7bec8f43dd6ce5d08~tplv-k3u1fbpfcp-watermark.image?"><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4bc57e8a2d0743e7bec8f43dd6ce5d08~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></a></p><p><a data-fancybox title="image.png" href="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a87f3c4bfcf456da24859bc35082906~tplv-k3u1fbpfcp-watermark.image?"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a87f3c4bfcf456da24859bc35082906~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></a></p><p>Expiration 我选择 no expiration 没有期限，Select scopes 自己看需要，我全勾了。提交后把 key 复制下来</p><h3 id="给项目添加-actions-secrets"><a class="header-anchor" href="#给项目添加-actions-secrets" aria-hidden="true">#</a> 给项目添加 Actions secrets</h3><p>在项目中的 settings =&gt; Secrets 创建一个 secret，把刚刚复制的 key 写入Value中，并记住你填写的 Name，后面的脚本需要用到，比如我的是 GH_TOKEN。如果在 Action 中需要发布 npm包，需要配置 NPM_TOKEN，这个自行查找方法。</p><p><a data-fancybox title="image.png" href="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/612b49886cc14c01901de3d05d86fec0~tplv-k3u1fbpfcp-watermark.image?"><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/612b49886cc14c01901de3d05d86fec0~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></a></p><p><a data-fancybox title="image.png" href="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bf146c2f51548c789a50f27c26f741c~tplv-k3u1fbpfcp-watermark.image?"><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bf146c2f51548c789a50f27c26f741c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></a></p><p><a href="https://blog.csdn.net/weixin_45178716/article/details/106416925" target="_blank" rel="noopener noreferrer">可参考这篇文章</a></p><h2 id="_2-添加依赖"><a class="header-anchor" href="#_2-添加依赖" aria-hidden="true">#</a> 2. 添加依赖</h2><div class="language-"><pre><code>yarn add semantic-release\n\n//这两个是为了集成 changelog，打 tags，自动更新版本号\nyarn add @semantic-release/changelog @semantic-release/git -D\n</code></pre></div><h2 id="_3-在项目中添加-github-workflows-release-yml"><a class="header-anchor" href="#_3-在项目中添加-github-workflows-release-yml" aria-hidden="true">#</a> 3. 在项目中添加 .github/workflows/release.yml</h2><div class="language-"><pre><code>name: Release\non:\n  push:\n    branches:\n      - master\njobs:\n  release:\n    name: Release\n    runs-on: ubuntu-18.04\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n      - name: Setup Node\n        uses: actions/setup-node@v1\n        with:\n          node-version: 16\n      - name: Install\n        run: yarn\n      - name: Release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}\n        run: npx semantic-release\n</code></pre></div><p>上面所做的就是：用户在 master 分支上 push 时触发，运行的环境是 ubuntu-18.04，设置 node 版本是16，然后下载依赖，最后执行 npx semantic-release。参数不懂可查阅文章开头链接。</p><h2 id="_4-在项目中添加配置文件-releaserc"><a class="header-anchor" href="#_4-在项目中添加配置文件-releaserc" aria-hidden="true">#</a> 4. 在项目中添加配置文件 .releaserc</h2><div class="language-"><pre><code>{\n    &quot;branch&quot;: &quot;master&quot;,\n    &quot;plugins&quot;: [\n        &quot;@semantic-release/commit-analyzer&quot;,\n        &quot;@semantic-release/release-notes-generator&quot;,\n        &quot;@semantic-release/changelog&quot;,\n        [\n            &quot;@semantic-release/npm&quot;,\n            {\n                &quot;npmPublish&quot;: false\n            }\n        ],\n        [\n            &quot;@semantic-release/git&quot;,\n            {\n                &quot;assets&quot;: [\n                    &quot;package.json&quot;,\n                    &quot;CHANGELOG.md&quot;\n                ],\n                &quot;message&quot;: &quot;chore(release): ${nextRelease.version} [skip ci]\\n\\n${nextRelease.notes}&quot;\n            }\n        ],\n        &quot;@semantic-release/github&quot;\n    ]\n}\n</code></pre></div><p><strong>如果没有设置 NPM_TOKEN，必须设置 &quot;npmPublish&quot;: false</strong></p><p>这些需要搭配 husky 以及 commitlint 限制用户的 commit 信息，可参考<a href="https://juejin.cn/post/7051512232374435847" target="_blank" rel="noopener noreferrer">我的文章</a>，自行去配置。</p><p>最后 push 一下代码，在 github 中的 Actions 可以看到这个 workflows 的过程，最后再查看一下 master 分支中也成功添加了 <a href="http://CHANGELOG.md" target="_blank" rel="noopener noreferrer">CHANGELOG.md</a>，并自动为我们打了一个 tags，并且每次都会更新版本</p><p><strong>版本更新的默认规则</strong></p><div class="language-"><pre><code># 修复 bug，更新小版本 1.0.x\nfix: &lt;message&gt;\n\n# 添加新功能，更新次版本号 1.x.0\nfeat: &lt;message&gt;\n\n# 如果 feat 中包含 BREAKING CHANGE 则会更新主版本 x.0.0\n</code></pre></div><p><a data-fancybox title="image.png" href="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dd2f51ad453e4d0c8d1874e569b684a3~tplv-k3u1fbpfcp-watermark.image?"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dd2f51ad453e4d0c8d1874e569b684a3~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></a></p><p>在其它代码托管平台，比如 gitlab，大致思路都是相同的，比如 gitlab 是直接在项目根目录的 .gitlab-ci.yml 去配置，语法不同（gitlab 的是<code>stages</code>，github 的是 <code>jobs</code>），都大同小异。.releaserc 这个文件的配置基本上都相同，只是引用的插件不同。</p><p><a href="http://xn--readme-9v7i14c4zy5xh0n6a8mmq92cmhbe15z.md" target="_blank" rel="noopener noreferrer">最后我们在项目中的readme.md</a>，加上</p><div class="language-"><pre><code>[&lt;a data-fancybox title=&quot;semantic-release&quot; href=&quot;https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg&quot;&gt;![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)&lt;/a&gt;](https://github.com/semantic-release/semantic-release)\n</code></pre></div><p>会有这样的效果</p><p><a data-fancybox title="image.png" href="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f5d31052f43487fb0e61e9c9c26d50e~tplv-k3u1fbpfcp-watermark.image?"><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f5d31052f43487fb0e61e9c9c26d50e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></a></p><p><a href="https://github.com/upJiang/jiangVue3Test" target="_blank" rel="noopener noreferrer">项目地址</a></p>',35);s.render=function(a,n,s,c,i,o){return t(),e("div",null,[r])};export default s;export{n as __pageData};
