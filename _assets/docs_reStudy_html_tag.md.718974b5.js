import{g as t,f as e,E as a}from"./common-d6bd45c0.js";const l='{"title":"语义标签","frontmatter":{},"headers":[{"level":2,"title":"语义标签","slug":"语义标签"}],"relativePath":"docs/reStudy/html_tag.md","lastUpdated":1637071417673.5017}';var n={};const d=a('<h2 id="语义标签"><a class="header-anchor" href="#语义标签" aria-hidden="true">#</a> 语义标签</h2><h4 id="html-的有些标签实际上就是必要的，甚至必要的程度可以达到：如果没有这个标签，文字会产生歧义的程度。em，强调标签"><a class="header-anchor" href="#html-的有些标签实际上就是必要的，甚至必要的程度可以达到：如果没有这个标签，文字会产生歧义的程度。em，强调标签" aria-hidden="true">#</a> HTML 的有些标签实际上就是必要的，甚至必要的程度可以达到：如果没有这个标签，文字会产生歧义的程度。em，强调标签</h4><div class="language-"><pre><code>今天我吃了一个&lt;em&gt;苹果&lt;/em&gt;。\n今天我吃了&lt;em&gt;一个&lt;/em&gt;苹果。\n</code></pre></div><h4 id="作为标题摘要的语义类标签"><a class="header-anchor" href="#作为标题摘要的语义类标签" aria-hidden="true">#</a> 作为标题摘要的语义类标签</h4><p>从 HTML 5 开始，我们有了 section 标签，这个标签可不仅仅是一个“有语义的 div”，它会改变 h1-h6 的语义。section 的嵌套会使得其中的 h1-h6 下降一级，因此，在 HTML5 以后，我们只需要 section 和 h1 就足以形成文档的树形结构：</p><div class="language-"><pre><code>&lt;section&gt;\n    &lt;h1&gt;HTML语义&lt;/h1&gt;\n    &lt;p&gt;balah balah balah balah&lt;/p&gt;\n    &lt;section&gt;\n        &lt;h1&gt;弱语义&lt;/h1&gt;\n        &lt;p&gt;balah balah&lt;/p&gt;\n    &lt;/section&gt;\n    &lt;section&gt;\n        &lt;h1&gt;结构性元素&lt;/h1&gt;\n        &lt;p&gt;balah balah&lt;/p&gt; \n    &lt;/section&gt;\n......\n&lt;/section&gt;\n</code></pre></div><p>这段代码同样会形成前面例子的标题结构：</p><ul><li>HTML 语义 <ul><li>弱语义</li><li>结构性元素</li></ul></li></ul><h4 id="作为整体结构的语义类标签"><a class="header-anchor" href="#作为整体结构的语义类标签" aria-hidden="true">#</a> 作为整体结构的语义类标签</h4><p>我们正确使用整体结构类的语义标签，可以让页面对机器更友好。比如，这里一个典型的 body 类似这样：</p><div class="language-"><pre><code>&lt;body&gt;\n    &lt;header&gt;\n        &lt;nav&gt;\n            ……\n        &lt;/nav&gt;\n    &lt;/header&gt;\n    &lt;aside&gt;\n        &lt;nav&gt;\n            ……\n        &lt;/nav&gt;\n    &lt;/aside&gt;\n    &lt;section&gt;……&lt;/section&gt;\n    &lt;section&gt;……&lt;/section&gt;\n    &lt;section&gt;……&lt;/section&gt;\n    &lt;footer&gt;\n        &lt;address&gt;……&lt;/address&gt;\n    &lt;/footer&gt;\n&lt;/body&gt;\n</code></pre></div><ul><li>header，如其名，通常出现在前部，表示导航或者介绍性的内容。</li><li>footer，通常出现在尾部，包含一些作者信息、相关链接、版权信息等。</li></ul><p>header 和 footer 一般都是放在 article 或者 body 的直接子元素，但是标准中并没有明确规定，footer 也可以和 aside，nav，section 相关联（header 不存在关联问题）。</p><ul><li>aside 表示跟文章主体不那么相关的部分，它可能包含导航、广告等工具性质的内容。</li></ul><p>aside 很容易被理解为侧边栏，实际上二者是包含关系，侧边栏是 aside，aside 不一定是侧边栏。</p><p>aside 和 header 中都可能出现导航（nav 标签），二者的区别是，header 中的导航多数是到文章自己的目录，而 aside 中的导航多数是到关联页面或者是整站地图。</p><p>最后 footer 中包含 address，这是个非常容易被误用的标签。address 并非像 date 一样，表示一个给机器阅读的地址，而是表示“文章（作者）的联系方式”，address 明确地只关联到 article 和 body。</p>',17);n.render=function(a,l,n,i,r,s){return e(),t("div",null,[d])};export default n;export{l as __pageData};
