import{g as e,f as t,E as n}from"./common-d6bd45c0.js";const a='{"title":"链表的合并","frontmatter":{},"headers":[{"level":2,"title":"链表的合并","slug":"链表的合并"},{"level":2,"title":"链表结点的删除","slug":"链表结点的删除"},{"level":2,"title":"删除问题的延伸——dummy 结点登场","slug":"删除问题的延伸——dummy-结点登场"},{"level":2,"title":"链表总结","slug":"链表总结"}],"relativePath":"docs/algorithm/chain.md","lastUpdated":1645866493447.5015}';var l={};const r=n('<p>链表的命题规律：</p><ul><li>链表的处理：合并、删除等（删除操作画个记号，重点中的重点！）</li><li>链表的反转及其衍生题目</li><li>链表成环问题及其衍生题目</li></ul><h2 id="链表的合并"><a class="header-anchor" href="#链表的合并" aria-hidden="true">#</a> 链表的合并</h2><blockquote><p>真题描述：将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有结点组成的。</p></blockquote><p>示例：输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4 输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p><p>我们回忆一下数组，题目逻辑是一样，数组使用的是双指针法，以第一个数组为底，长度为两数组之后。指针同时从末尾开始往左移动，通过判断两数组值移动赋值。</p><p>在链表里面，没有索引这个概念，它就像一个链子，我们只要改变了 next 指向，就会改变整个链表的长度。所以在这题中，我们只需要定义一个链表，然后从头开始比较两个链表初始位置的大小，将较小的顺序插入新链表中，然后改变被插入的head等于它的 next 即可，同时改变新链表的当前 head。后面将剩余的链表末段指向新链表末尾即可。</p><div class="language-"><pre><code>const mergeTwoLists = function(l1, l2) {\n  // 定义头结点，确保链表可以被访问到\n  let head = new ListNode()\n  // cur 这里就是咱们那根“针”\n  let cur = head\n  // “针”开始在 l1 和 l2 间穿梭了\n  while(l1 &amp;&amp; l2) {\n      // 如果 l1 的结点值较小\n      if(l1.val&lt;=l2.val) {\n          // 先串起 l1 的结点\n          cur.next = l1\n          // l1 指针向前一步\n          l1 = l1.next\n      } else {\n          // l2 较小时，串起 l2 结点\n          cur.next = l2\n          // l2 向前一步\n          l2 = l2.next\n      }\n      \n      // “针”在串起一个结点后，也会往前一步\n      cur = cur.next \n\n  }\n  \n  // 处理链表不等长的情况\n  cur.next = l1!==null?l1:l2\n  // 返回起始结点\n  return head.next\n};\n</code></pre></div><h2 id="链表结点的删除"><a class="header-anchor" href="#链表结点的删除" aria-hidden="true">#</a> 链表结点的删除</h2><blockquote><p>真题描述：给定一个<code>排序链表</code>，删除所有重复的元素，使得每个元素只出现一次。</p></blockquote><p>示例：<br> 输入: 1-&gt;1-&gt;2-&gt;3-&gt;3 <br> 输出: 1-&gt;2-&gt;3</p><p><a data-fancybox title="img" href="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/17/170e6f3b38195ccf~tplv-t2oaga2asx-watermark.awebp"><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/17/170e6f3b38195ccf~tplv-t2oaga2asx-watermark.awebp" alt="img"></a></p><p>思路：因为是有序链表，在满足 cur != null &amp;&amp; cur.next != null 下判断 cur.val === cur.next.val 即可,注意通过 while 循环时要改变 cur 的 head （cur = cur.next;）</p><div class="language-"><pre><code>const deleteDuplicates = function(head) {\n    // 设定 cur 指针，初始位置为链表第一个结点\n    let cur = head;\n    // 遍历链表\n    while(cur != null &amp;&amp; cur.next != null) {\n        // 若当前结点和它后面一个结点值相等（重复）\n        if(cur.val === cur.next.val) {\n            // 删除靠后的那个结点（去重）\n            cur.next = cur.next.next;\n        } else {\n            // 若不重复，继续遍历\n            cur = cur.next;\n        }\n    }\n    return head;\n};\n</code></pre></div><h2 id="删除问题的延伸——dummy-结点登场"><a class="header-anchor" href="#删除问题的延伸——dummy-结点登场" aria-hidden="true">#</a> 删除问题的延伸——dummy 结点登场</h2><blockquote><p>真题描述：给定一个排序链表，删除所有含有重复数字的结点，只保留原始链表中 没有重复出现的数字。</p></blockquote><p>示例：<br> 输入: 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5<br> 输出: 1-&gt;2-&gt;5<br></p><p>思路：</p><ul><li>跟上面一道题很像，只是要把相同的都删掉不做保留，试想一下，如果当走到 cur.val === cur.next.val ，我们是无法删除 cur 这个结点的，因为我们无法拿到的它的前驱结点并改变，或者说我们的第一个结点没有前驱结点，没办法删除。</li><li><code>dummy 结点</code>，就是咱们<strong>人为制造出来的第一个结点的前驱结点</strong>。我们定义一个新链表 dummy，把 dummy 的 next 指向目标链表，这样就为目标链表的首部创建了前驱结点，就能够进行删除了。但要注意我们比较的应该是：dummy.next.val === dummy.next.next.val,</li></ul><p><a data-fancybox title="img" href="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/17/170e7109a0a2ad77~tplv-t2oaga2asx-watermark.awebp"><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/17/170e7109a0a2ad77~tplv-t2oaga2asx-watermark.awebp" alt="img"></a></p><p>这样一来，如果想要删除两个连续重复的值为 1 的结点，我们只需要把 dummy 结点的 next 指针直接指向 2：</p><div class="language-"><pre><code>const deleteDuplicates = function(head) {\n    // 极端情况：0个或1个结点，则不会重复，直接返回\n    if(!head || !head.next) {\n        return head\n    }\n    // dummy 登场\n    let dummy = new ListNode() \n    // dummy 永远指向头结点\n    dummy.next = head   \n    // cur 从 dummy 开始遍历\n    let cur = dummy \n    // 当 cur 的后面有至少两个结点时\n    while(cur.next &amp;&amp; cur.next.next) {\n        // 对 cur 后面的两个结点进行比较\n        if(cur.next.val === cur.next.next.val) {\n            // 若值重复，则记下这个值\n            let val = cur.next.val\n            // 反复地排查后面的元素是否存在多次重复该值的情况\n            while(cur.next &amp;&amp; cur.next.val===val) {\n                // 若有，则删除\n                cur.next = cur.next.next \n            }\n        } else {\n            // 若不重复，则正常遍历\n            cur = cur.next\n        }\n    }\n    // 返回链表的起始结点\n    return dummy.next;\n};\n</code></pre></div><h2 id="链表总结"><a class="header-anchor" href="#链表总结" aria-hidden="true">#</a> 链表总结</h2><p>链表的处理思维跟数组完全不同，我们应该忘记那些双指针，对撞指针，Map，</p><ul><li>增删聚焦在改变 next 中，</li><li>判断 cur.val === cur.next.val ，</li><li>修改当前结点指向：cur = cur.next</li><li>返回链表头 head（dummy.next）</li><li>无法处理的就增加一个前驱结点，使用 dummy 结点。</li></ul>',25);l.render=function(n,a,l,u,c,d){return t(),e("div",null,[r])};export default l;export{a as __pageData};
