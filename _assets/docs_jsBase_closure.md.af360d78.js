import{g as e,f as t,E as a}from"./common-d6bd45c0.js";const l='{"title":"闭包的作用","frontmatter":{},"headers":[{"level":2,"title":"闭包的作用","slug":"闭包的作用"},{"level":2,"title":"应用场景","slug":"应用场景"},{"level":3,"title":"settmeout传入第一个参数","slug":"settmeout传入第一个参数"},{"level":3,"title":"创建独立的环境，保存变量","slug":"创建独立的环境，保存变量"}],"relativePath":"docs/jsBase/closure.md","lastUpdated":1639657876227.9243}';var r={};const i=a('<blockquote><p>闭包是指有权访问另一个函数作用域中的变量的函数。 闭包的创建方法：一个函数中嵌套另外一个函数，并且将这个函数return出去，然后将这个return出来的函数保存到了一个变量中，那么就创建了一个闭包。</p></blockquote><h2 id="闭包的作用"><a class="header-anchor" href="#闭包的作用" aria-hidden="true">#</a> 闭包的作用</h2><ol><li>可以读取函数内部的变量</li><li>让这些变量的值始终保存在内存中</li><li>可以做缓存</li><li>外部函数可以访问内部函数的变量</li><li>变量和参数不会被垃圾回收</li></ol><blockquote><p>一般不要使用闭包，避免产生不可回收的变量，产生内存泄露，加大内存消耗</p></blockquote><h2 id="应用场景"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h2><h3 id="settmeout传入第一个参数"><a class="header-anchor" href="#settmeout传入第一个参数" aria-hidden="true">#</a> settmeout传入第一个参数</h3><p><a data-fancybox title="image.png" href="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e345dc8604049f7beeb99384cc1180d~tplv-k3u1fbpfcp-watermark.image?"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e345dc8604049f7beeb99384cc1180d~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></a></p><h3 id="创建独立的环境，保存变量"><a class="header-anchor" href="#创建独立的环境，保存变量" aria-hidden="true">#</a> 创建独立的环境，保存变量</h3><p>清楚闭包：闭包函数 = null</p>',9);r.render=function(a,l,r,o,c,s){return t(),e("div",null,[i])};export default r;export{l as __pageData};
