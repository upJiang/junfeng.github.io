import{g as e,f as l,E as t}from"./common-d6bd45c0.js";const i='{"title":"简单选择器","frontmatter":{},"headers":[{"level":2,"title":"简单选择器","slug":"简单选择器"},{"level":3,"title":"类型选择器和全体选择器","slug":"类型选择器和全体选择器"},{"level":3,"title":"id 选择器与 class 选择器","slug":"id-选择器与-class-选择器"},{"level":3,"title":"属性选择器","slug":"属性选择器"},{"level":3,"title":"伪类选择器","slug":"伪类选择器"},{"level":2,"title":"选择器的组合","slug":"选择器的组合"},{"level":2,"title":"选择器的优先级","slug":"选择器的优先级"},{"level":2,"title":"伪元素","slug":"伪元素"},{"level":3,"title":"::first-line","slug":"first-line"},{"level":3,"title":"::first-letter","slug":"first-letter"},{"level":3,"title":"::before ::after","slug":"before-after"}],"relativePath":"docs/reStudy/css_select.md","lastUpdated":1639657876285.8923}';var a={};const n=t('<blockquote><p>选择器的基本意义是：根据一些特征，选中元素树上的一批元素。</p></blockquote><ul><li>简单选择器：针对某一特征判断是否选中元素。</li><li>复合选择器：连续写在一起的简单选择器，针对元素自身特征选择单个元素</li><li>复杂选择器：由“（空格）”“ &gt;”“ ~”“ +”“ ||”等符号连接的复合选择器，根据父元素或者前序元素检查单个元素。</li><li>选择器列表：由逗号分隔的复杂选择器，表示“或”的关系。</li></ul><h2 id="简单选择器"><a class="header-anchor" href="#简单选择器" aria-hidden="true">#</a> 简单选择器</h2><p><a data-fancybox title="image.png" href="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a845c432fe004641bc2dad01b8bd4e13~tplv-k3u1fbpfcp-watermark.image?"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a845c432fe004641bc2dad01b8bd4e13~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></a></p><h3 id="类型选择器和全体选择器"><a class="header-anchor" href="#类型选择器和全体选择器" aria-hidden="true">#</a> 类型选择器和全体选择器</h3><blockquote><p>根据一个元素的标签名来选中元素</p></blockquote><div class="language-"><pre><code>div {\n\n}\n</code></pre></div><p>我们还必须要考虑 HTML 或者 XML 元素的命名空间问题。</p><p>比如我们的 svg 元素，实际上在： <a href="http://www.w3.org/2000/svg" target="_blank" rel="noopener noreferrer">http://www.w3.org/2000/svg</a> 命名空间之下。</p><p>svg 和 HTML 中都有 a 元素，我们若要想区分选择 svg 中的 a 和 HTML 中的 a，就必须用带命名空间的类型选择器。</p><div class="language-"><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta charset=&quot;utf-8&quot;&gt;\n  &lt;title&gt;JS Bin&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;svg width=&quot;100&quot; height=&quot;28&quot; viewBox=&quot;0 0 100 28&quot; version=&quot;1.1&quot;\n     xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;\n  &lt;desc&gt;Example link01 - a link on an ellipse\n  &lt;/desc&gt;\n  &lt;a xlink:href=&quot;http://www.w3.org&quot;&gt;\n    &lt;text y=&quot;100%&quot;&gt;name&lt;/text&gt;\n  &lt;/a&gt;\n&lt;/svg&gt;\n&lt;br/&gt;\n&lt;a href=&quot;javascript:void 0;&quot;&gt;name&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n@namespace svg url(http://www.w3.org/2000/svg);\n@namespace html url(http://www.w3.org/1999/xhtml);\nsvg|a {\n  stroke:blue;\n  stroke-width:1;\n}\n\nhtml|a {\n  font-size:40px\n}\n</code></pre></div><p>这里有一个特殊的选择器，就是“ * ” ，它称为全体选择器，可以选中任意元素。它的用法跟类型选择器是完全一致的</p><h3 id="id-选择器与-class-选择器"><a class="header-anchor" href="#id-选择器与-class-选择器" aria-hidden="true">#</a> id 选择器与 class 选择器</h3><blockquote><p>id 选择器和 class 选择器都是针对特定属性的选择器。id 选择器是“#”号后面跟随 id 名，class 选择器是“.”后面跟随 class 名</p></blockquote><div class="language-"><pre><code>#myid {\n  stroke:blue;\n  stroke-width:1;\n}\n\n.mycls {\n  font-size:40px\n}\n</code></pre></div><h3 id="属性选择器"><a class="header-anchor" href="#属性选择器" aria-hidden="true">#</a> 属性选择器</h3><p>属性选择器根据 HTML 元素的属性来选中元素。属性选择器有四种形态。</p><ul><li><p>第一种，[att] 直接在方括号中放入属性名，是检查元素是否具有这个属性，只要元素有这个属性，不论属性是什么值，都可以被选中。</p></li><li><p>第二种，[att=val] 精确匹配，检查一个元素属性的值是否是 val。</p></li><li><p>第三种，[att~=val] 多种匹配，检查一个元素的值是否是若干值之一，这里的 val 不是一个单一的值了，可以是用空格分隔的一个序列</p></li><li><p>第四种，[att|=val] 开头匹配，检查一个元素的值是否是以 val 开头，它跟精确匹配的区别是属性只要以 val 开头即可，后面内容不管。</p></li></ul><p>有些 HTML 属性含有特殊字符，这个时候，可以把 val 用引号括起来，形成一个 CSS 字符串。CSS 字符串允许使用单双引号来规避特殊字符，也可以用反斜杠转义，这样，就可以表示出任意属性值啦。</p><h3 id="伪类选择器"><a class="header-anchor" href="#伪类选择器" aria-hidden="true">#</a> 伪类选择器</h3><p>伪类选择器是一系列由 CSS 规定好的选择器，它们以冒号开头。伪类选择器有普通型和函数型两种。伪类中最常用的部分：树结构关系伪类。</p><h4 id="树结构关系伪类选择器"><a class="header-anchor" href="#树结构关系伪类选择器" aria-hidden="true">#</a> 树结构关系伪类选择器</h4><p>:root 伪类表示树的根元素，在选择器是针对完整的 HTML 文档情况，我们一般用 HTML 标签即可选中根元素。但是随着 scoped css 和 shadow root 等场景出现，选择器可以针对某一子树来选择，这时候就很需要 root 伪类了。</p><ul><li>:empty 伪类表示没有子节点的元素，这里有个例外就是子节点为空白文本节点的情况。</li><li>:nth-child 和 :nth-last-child 这是两个函数型的伪类，CSS 的 An+B 语法设计的是比较复杂的，我们这里仅仅介绍基本用法。我们还是看几个例子：</li></ul><p><a data-fancybox title="image.png" href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/128f31c9db444593b8f264c42c771917~tplv-k3u1fbpfcp-watermark.image?"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/128f31c9db444593b8f264c42c771917~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></a></p><ul><li>:nth-last-child 的区别仅仅是从后往前数。</li><li>:first-child :last-child 分别表示第一个和最后一个元素。</li><li>:only-child 按字面意思理解即可，选中唯一一个子元素。</li></ul><p>of-type 系列，是一个变形的语法糖，S:nth-of-type(An+B) 是:nth-child(|An+B| of S) 的另一种写法。</p><p>以此类推，还有 nth-last-of-type、first-of-type、last-of-type、only-of-type。</p><h4 id="链接与行为伪类选择器"><a class="header-anchor" href="#链接与行为伪类选择器" aria-hidden="true">#</a> 链接与行为伪类选择器</h4><blockquote><p>链接与行为是第一批设计出来的伪类，也是最常用的一批。</p></blockquote><ul><li>:any-link 表示任意的链接，包括 a、area 和 link 标签都可能匹配到这个伪类。</li><li>:link 表示未访问过的链接， :visited 表示已经访问过的链接。</li><li>:hover 表示鼠标悬停在上的元素。</li><li>:active 表示用户正在激活这个元素，如用户按下按钮，鼠标还未抬起时，这个按钮就处于激活状态。</li><li>:focus 表示焦点落在这个元素之上。</li><li>:target 用于选中浏览器 URL 的 hash 部分所指示的元素。</li></ul><p>在 Selector Level 4 草案中，还引入了 target-within、focus-within 等伪类，用于表示 target 或者 focus 的父容器。</p><h4 id="逻辑伪类选择器"><a class="header-anchor" href="#逻辑伪类选择器" aria-hidden="true">#</a> 逻辑伪类选择器</h4><p>:not 伪类。这个伪类是个函数型伪类，它的作用时选中内部的简单选择器命中的元素。</p><div class="language-"><pre><code>*|*:not(:hover)\n</code></pre></div><p>选择器 3 级标准中，not 只支持简单选择器，在选择器 4 级标准，则允许 not 接受一个选择器列表，这意味着选择器支持嵌套，仅靠 not 即可完成选择器的一阶真值逻辑完备，但目前还没有看到浏览器实现它。</p><p>在 Selector Level 4 草案中，还引入了:is :where :has 等逻辑伪类，但是它们有一些违背了选择器匹配 DOM 树不回溯的原则，所以这部分设计最终的命运如何还不太确定。</p><h4 id="其它伪类选择器"><a class="header-anchor" href="#其它伪类选择器" aria-hidden="true">#</a> 其它伪类选择器</h4><p>还有一些草案中或者不常用的选择器，你仅做大概了解即可。</p><ul><li>国际化：用于处理国际化和多语言问题。 <ul><li>dir</li><li>lang</li></ul></li><li>音频 / 视频：用于区分音视频播放状态。 <ul><li>play</li><li>pause</li></ul></li><li>时序：用于配合读屏软件等时序性客户端的伪类。 <ul><li>current</li><li>past</li><li>future</li></ul></li><li>表格：用于处理 table 的列的伪类。 <ul><li>nth-col</li><li>nth-last-col</li></ul></li></ul><h2 id="选择器的组合"><a class="header-anchor" href="#选择器的组合" aria-hidden="true">#</a> 选择器的组合</h2><blockquote><p>选择器列表是用逗号分隔的复杂选择器序列；复杂选择器则是用空格、大于号、波浪线等符号连接的复合选择器；复合选择器则是连写的简单选择器组合。</p></blockquote><p>根据选择器列表的语法，选择器的连接方式可以理解为像四则运算一样有优先级。</p><ul><li>第一优先级 <ul><li>无连接符号</li></ul></li><li>第二优先级 <ul><li>“空格”</li><li>“~”</li><li>“+”</li><li>“&gt;”</li><li>“||”</li></ul></li><li>第三优先级 <ul><li>“,”</li></ul></li></ul><p>例如以下选择器：</p><div class="language-"><pre><code>.c,.a&gt;.b.d {\n    /*......*/\n}\n</code></pre></div><p>例子中的“ .b.d ”，表示选中的元素必须同时具有 b 和 d 两个 class。</p><p>复杂选择器是针对节点关系的选择，它规定了五种连接符号。</p><ul><li><strong>“空格”</strong>：后代，表示选中所有符合条件的后代节点， 例如“ .a .b ”表示选中所有具有 class 为 a 的后代节点中 class 为 b 的节点。</li><li><strong>“&gt;”</strong> ：子代，表示选中符合条件的子节点，例如“ .a&gt;.b ”表示：选中所有“具有 class 为 a 的子节点中，class 为 b 的节点”。</li><li><strong>“~”</strong> : 后继，表示选中所有符合条件的后继节点，后继节点即跟当前节点具有同一个父元素，并出现在它之后的节点，例如“ .a~.b ”表示选中所有具有 class 为 a 的后继中，class 为 b 的节点。</li><li><strong>“+”</strong>：直接后继，表示选中符合条件的直接后继节点，直接后继节点即 nextSlibling。例如 “.a+.b ”表示选中所有具有 class 为 a 的下一个 class 为 b 的节点。</li><li><strong>“||”</strong>：列选择器，表示选中对应列中符合条件的单元格。</li></ul><h2 id="选择器的优先级"><a class="header-anchor" href="#选择器的优先级" aria-hidden="true">#</a> 选择器的优先级</h2><blockquote><p>CSS 标准用一个三元组 (a, b, c) 来构成一个复杂选择器的优先级。</p></blockquote><ul><li>id 选择器的数目记为 a；</li><li>伪类选择器和 class 选择器的数目记为 b；</li><li>伪元素选择器和标签选择器数目记为 c；</li><li>“*” 不影响优先级。</li></ul><p>CSS 标准建议用一个足够大的进制，获取“ a-b-c ”来表示选择器优先级。</p><div class="language-"><pre><code>specificity = base * base * a + base * b + c\n</code></pre></div><p>看个常见的例子：</p><div class="language-"><pre><code>&lt;div id=&quot;my&quot; class=&quot;x y z&quot;&gt;text&lt;div&gt;\n\n\n.x {\n    background-color:lightblue;\n}\n.z {\n    background-color:lightblue;\n}\n.y {\n    background-color:lightgreen;\n}\n\n输出的是y的颜色\n</code></pre></div><p>在这个例子中，“.x ”和“.z ”都指定了背景色为浅蓝色，但是因为“.y ”规则在最后，所以最终显示结果为浅绿色。另外一个需要注意的是，选择器的优先级是针对复杂选择器的优先级，选择器列表不会合并计算优先级。</p><div class="language-"><pre><code>&lt;div id=&quot;my&quot; class=&quot;x y z&quot;&gt;text&lt;div&gt;\n\n.x, .z {\n    background-color:lightblue;\n}\n.y {\n    background-color:lightgreen;\n}\n\n输出的是y的颜色\n</code></pre></div><p>这里选择器列表“ .x, .z”命中了 div，但是它的两项分别计算优先级，所以最终优先级仍跟“ .y” 规则相同。</p><p>以上就是选择器优先级的相关规则了，虽然我们这里介绍了详细的计算方式，但是我认为选择器的使用上，如果产生复杂的优先级计算，代码的可读性一定是有问题的。</p><p>所以实践中，建议你“根据 id 选单个元素”“class 和 class 的组合选成组元素”“tag 选择器确定页面风格”这样的简单原则来使用选择器，不要搞出过于复杂的选择器。</p><h2 id="伪元素"><a class="header-anchor" href="#伪元素" aria-hidden="true">#</a> 伪元素</h2><blockquote><p>伪元素的语法跟伪类相似，但是实际产生的效果却是把不存在的元素硬选出来。</p></blockquote><p>目前兼容性达到可用的伪元素有以下几种。</p><ul><li>::first-line 元素的第一行</li><li>::first-letter 元素的第一个字母</li><li>::before</li><li>::after</li></ul><h3 id="first-line"><a class="header-anchor" href="#first-line" aria-hidden="true">#</a> ::first-line</h3><blockquote><p>元素的第一行</p></blockquote><div class="language-"><pre><code>&lt;p&gt;This is a somewhat long HTML\nparagraph that will be broken into several\nlines. The first line will be identified\nby a fictional tag sequence. The other lines\nwill be treated as ordinary lines in the\nparagraph.&lt;/p&gt;\n\n\np::first-line { \n    text-transform: uppercase \n}\n</code></pre></div><p>这一段代码把段落的第一行字母变为大写。注意这里的第一行指的是<strong>排版后显示的第一行</strong>，跟 HTML 代码中的换行无关。</p><h3 id="first-letter"><a class="header-anchor" href="#first-letter" aria-hidden="true">#</a> ::first-letter</h3><blockquote><p>指第一个字母。首字母变大并向左浮动是一个非常常见的排版方式。</p></blockquote><div class="language-"><pre><code>&lt;p&gt;This is a somewhat long HTML\nparagraph that will be broken into several\nlines. The first line will be identified\nby a fictional tag sequence. The other lines\nwill be treated as ordinary lines in the\nparagraph.&lt;/p&gt;\n\np::first-letter { \n    text-transform: uppercase;\n    font-size:2em;\n    float:left; \n}\n</code></pre></div><p>CSS 标准只要求 ::first-line 和 ::first-letter 实现有限的几个 CSS 属性，都是文本相关，这些属性是下面这些。<br><a data-fancybox title="image.png" href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5bb6b72a446842bc969ff868e38b0836~tplv-k3u1fbpfcp-watermark.image?"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5bb6b72a446842bc969ff868e38b0836~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></a></p><h3 id="before-after"><a class="header-anchor" href="#before-after" aria-hidden="true">#</a> ::before ::after</h3><p>::before 表示在元素内容之前插入一个虚拟的元素，::after 则表示在元素内容之后插入。</p><p>这两个伪元素所在的 CSS 规则必须指定 content 属性才会生效，我们看下例子：</p><div class="language-"><pre><code>&lt;p class=&quot;special&quot;&gt;I&#39;m real element&lt;/p&gt;\n\n\np.special::before {\n    display: block;\n    content: &quot;pseudo! &quot;;\n}\n</code></pre></div><p>这里要注意一点，::before 和 ::after 还支持 content 为 counter，如：</p><div class="language-"><pre><code>&lt;p class=&quot;special&quot;&gt;I&#39;m real element&lt;/p&gt;\np.special::before {\n    display: block;\n    content: counter(chapno, upper-roman) &quot;. &quot;;\n}\n</code></pre></div><p>这对于实现一些列表样式是非常有用的。</p>',80);a.render=function(t,i,a,r,o,s){return l(),e("div",null,[n])};export default a;export{i as __pageData};
